//
//  Shortcut+Deprecated.swift
//  XTouchBar
//
//  Created by Dominik Bucher on 21/04/2020.
//  Copyright ¬© 2020 Dominik Bucher. All rights reserved.
//

import Foundation

/// Xcode's default shortcuts, as static constants.
/// (Is it a good idea to have them as static constants? Wouldn't something like JSON be better? Or static 'Dictionary[String : Shortcut]'?)
/// Lines that are commented out don't have default shortcuts.
/// (OR HAVEN'T BEEN MANUALLY ASSIGNED YET!!! Delete this once we're finished with the manual labor)
/// Or make pull request ü§™
extension Shortcut {

  // MARK: - Useful

  static let zoomIn = Shortcut(
    iconData: NSImage(named: "Zoom In")?.tiffRepresentation,
    id: "GPUDebugger_zoomInCounterGraph:",
    key: .keypadPlus,
    modifiers: [.command],
    itemDescription: "Zooms in"
  )
  static let zoomOut = Shortcut(
    iconData: NSImage(named: "Zoom Out")?.tiffRepresentation,
    id: "GPUDebugger_zoomOutCounterGraph:",
    key: .keypadMinus,
    modifiers: [.command],
    itemDescription: "Zooms out"
  )
  static let focusSelection = Shortcut(
    id: "focusSelectedNodeAction:",
    key: .F,
    modifiers: [.option],
    itemDescription: "Focuses selection "
  )
  static let showComponentsInspector = Shortcut(
    id: "showInspectorWithChoiceFromSender:",
    key: .keypad6,
    modifiers: [.option, .command],
    itemDescription: "Shows components inspector"
  )
  static let findInWorkspace = Shortcut(
    iconData: nil,
    id: "findInWorkspace:",
    key: .F,
    modifiers: [.shift, .command],
    itemDescription: "Find in workspace"
  )
  static let open = Shortcut(
    id: "openDocument:",
    key: .O,
    modifiers: [.command],
    itemDescription: "Open document (slowly)"
  )
  static let showCodeReview = Shortcut(
    iconData: NSImage(named: "Show Code Review")?.tiffRepresentation,
    id: "_toggleShowCodeReviewForEditor:",
    key: .returnKey,
    modifiers: [.command, .shift, .option],
    itemDescription: "Show code review"
  )
  #warning("No icon, so let's not use it üëåüèª")
  static let findAndReplaceInWorkspace = Shortcut(
    id: "findAndReplaceInWorkspace:",
    key: .F,
    modifiers: [.command, .shift, .option],
    itemDescription: "Find and replace in workspace"
  )

  static let openQuickly = Shortcut(
    iconData: NSImage(named: "Open Quickly")?.tiffRepresentation,
    id: "openQuickly:",
    key: .O,
    modifiers: [.command, .shift],
    itemDescription: "Open quickly document"
  )
  // there are 4 different "addDocumentation:" shortcuts: one for playgrounds, one for asset catalog comparison etc.
  // how do we handle that???
  static let addDocumentation = Shortcut(
    iconData: NSImage(named: "Add Documentation")?.tiffRepresentation,
    id: "addDocumentation:",
    key: .slash,
    modifiers: [.option, .command],
    itemDescription: "Add documentation"
  )
  static let commentSelection = Shortcut(
    iconData: NSImage(named: "Comment")?.tiffRepresentation,
    id: "toggleComments:",
    key: .slash,
    modifiers: [.command],
    itemDescription: "Comment selection"
  )
  static let editAllInScope = Shortcut(
    iconData: NSImage(named: "Edit All In Scope")?.tiffRepresentation,
    id: "toggleTokenizedEditing:",
    key: .E,
    modifiers: [.command, .control],
    itemDescription: "Edit all in scope"
  )
  static let fixAllIssues = Shortcut(
    iconData: NSImage(named: "Fix All In Scope")?.tiffRepresentation,
    id: "fixAllIssues:",
    key: .F,
    modifiers: [.command,.control,.option],
    itemDescription: "Fix all in scope"
  )
  static let jumpToDefinition = Shortcut(
    iconData: NSImage(named: "Jump To Definition")?.tiffRepresentation,
    id: "editorContext_jumpToDefinition:",
    key: .J, modifiers: [.command, .control],
    itemDescription: "Jump to definition"
  )

  static let fold = Shortcut(
    iconData: NSImage(named: "Fold Code")?.tiffRepresentation,
    id: "fold:",
    key: .leftArrow,
    modifiers: [.command, .option],
    itemDescription: "Fold code"
  )

  static let unfold = Shortcut(
    iconData: NSImage(named: "Unfold Code")?.tiffRepresentation,
    id: "unfold:",
    key: .rightArrow,
    modifiers: [.command, .option],
    itemDescription: "Unfold code"
  )

  /// Somehow Apple say this is find in selected groups even it's search :D
  static let findInSelectedGroups = Shortcut(
    iconData: NSImage(named: "Find In Selected Groups")?.tiffRepresentation,
    id: "searchInSelectedGroups:",
    key: .F,
    modifiers: [.control, .shift],
    itemDescription: "Search in selected groups"
  )


  // MARK: - Probably useless.

  //  static let showDataModelInspector = Shortcut(
  //    id: "showInspectorWithChoiceFromSender:",
  //    key: .keypad4,
  //    modifiers: [.option, .command],
  //    itemDescription: "Shows data model inspector"
  //  )
  //  static let showMappingModelInspector = Shortcut(
  //    id: "showInspectorWithChoiceFromSender:",
  //    key: .keypad4,
  //    modifiers: [.option, .command],
  //    itemDescription: "Shows mapping model inspector"
  //  )

  // NO_DEFAULT    static let exportGpuCounters = Shortcut(id: "GPUDebugger_exportCounters:", key: /*NO_DEFAULT*/, modifiers: [])
  // NO_DEFAULT    static let hideEmptyCounters = Shortcut(id: "GPUDebugger_hideEmptyCounters:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let scaleToFit = Shortcut(id: "GPUDebugger_scaleToFit:", key: .O, modifiers: [.command])

  //    static let selectNextDrawEncoder = Shortcut(id: "GPUDebugger_selectNextItem:", key: .rightArrow, modifiers: [.control, .option]) ADD MISSING KEYS TO KEY
  //   static let selectPrevDrawEncoder = Shortcut(id: "GPUDebugger_selectPrevItem:", key: .leftArrow, modifiers: [.control, .option]) ADD MISSING KEYS TO KEY

  // NO_DEFAULT    static let showEmptyCounters = Shortcut(id: "GPUDebugger_showEmptyCounters:", key: .O, modifiers: [.command])

  // NO_DEFAULT    static let exportMemoryReport‚Ä¶ = Shortcut(id: "GPUDebugger_exportMemoryReport:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let xAxis = Shortcut(id: "alignX:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let yAxis = Shortcut(id: "alignY:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let zAxis = Shortcut(id: "alignZ:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let clearRoll = Shortcut(id: "clearRoll:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let toggleIntertia = Shortcut(id: "toggleIntertia:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let orthographic = Shortcut(id: "createOrthographicCamera:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let perspective = Shortcut(id: "createPerspectiveCamera:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let drag = Shortcut(id: "createDragField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let electric = Shortcut(id: "createElectricField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let linearGravity = Shortcut(id: "createLinearGravityField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let magnetic = Shortcut(id: "createMagneticField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let noise = Shortcut(id: "createNoiseField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let radialGravity = Shortcut(id: "createRadialGravityField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let spring = Shortcut(id: "createSpringField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let turbulence = Shortcut(id: "createTurbulenceField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let vortex = Shortcut(id: "createVortexField:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let ambient = Shortcut(id: "createAmbientLight:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let area = Shortcut(id: "createAreaLight:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let directional = Shortcut(id: "createDirectionalLight:", key: .O, modifiers: [.command])
  // NO_DEFAULT    static let ies = Shortcut(id: "createIESLight:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let omni = Shortcut(id: "createOmniLight:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let probe = Shortcut(id: "createLightProbe:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let spot = Shortcut(id: "createSpotLight:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let emptyNode = Shortcut(id: "createNode:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let particleSystem = Shortcut(id: "createParticleSystem:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let box = Shortcut(id: "createBox:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let capsule = Shortcut(id: "createCapsule:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let cone = Shortcut(id: "createCone:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let cylinder = Shortcut(id: "createCylinder:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let floor = Shortcut(id: "createFloor:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let plane = Shortcut(id: "createPlane:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let pyramid = Shortcut(id: "createPyramid:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let sphere = Shortcut(id: "createSphere:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let text = Shortcut(id: "createText:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let torus = Shortcut(id: "createTorus:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let tube = Shortcut(id: "createTube:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let geosphere = Shortcut(id: "createGeodesicSphere:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let enableDefaultLighting = Shortcut(id: "toggleDefaultLighting:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let enableJittering = Shortcut(id: "useJitteringDidChange:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let enableWireframe = Shortcut(id: "useWireframeDidChange:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let surroundToSelect = Shortcut(id: "toggleSelectionMode:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let hideSelection = Shortcut(id: "hideNodes:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let flattenSelection = Shortcut(id: "flattenNodes:", key: .O, modifiers: [.command])
  // NO_DEFAULT   static let convertToScenekitFileFormat(.scn) = Shortcut(id: "upgradeToArchivedSceneKitDocumentFileTypeAction:", key: .O, modifiers: [.command])

  /* CONTINUE HERE */

  //    static let showEntityAttributesInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showMaterialInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showNodeInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showPhysicsInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showSceneInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showAttributesInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showCustomClassInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showComponentsInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showContents = Shortcut(id: "switchToContentModeContents:", key: .O, modifiers: [.command])
  //    static let orientTo3d = Shortcut(id: "toggle2D3D:", key: .O, modifiers: [.command])
  //    static let showClippedContent = Shortcut(id: "toggleClippingOfContent:", key: .O, modifiers: [.command])
  //    static let showConstraints = Shortcut(id: "toggleShowConstraints:", key: .O, modifiers: [.command])
  //    static let showControllers = Shortcut(id: "toggleShowControllers:", key: .O, modifiers: [.command])
  //    static let showLayers = Shortcut(id: "toggleShowLayers:", key: .O, modifiers: [.command])
  //    static let showWireframesAndContents = Shortcut(id: "switchToContentModeWireframesAndContents:", key: .O, modifiers: [.command])
  //    static let showWireframes = Shortcut(id: "switchToContentModeWireframes:", key: .O, modifiers: [.command])
  //    static let zoomActual = Shortcut(id: "zoomActualCanvas:", key: .O, modifiers: [.command])
  //    static let zoomIn = Shortcut(id: "zoomInCanvas:", key: .O, modifiers: [.command])
  //    static let zoomOut = Shortcut(id: "zoomOutCanvas:", key: .O, modifiers: [.command])
  //    static let systemAppearance = Shortcut(id: "systemAppearanceAuto:", key: .O, modifiers: [.command])
  //    static let dark = Shortcut(id: "systemAppearanceDark:", key: .O, modifiers: [.command])
  //    static let highContrastDark = Shortcut(id: "systemAppearanceIncreasedContrastDark:", key: .O, modifiers: [.command])
  //    static let highContrastLight = Shortcut(id: "systemAppearanceIncreasedContrastLight:", key: .O, modifiers: [.command])
  //    static let light = Shortcut(id: "systemAppearanceLight:", key: .O, modifiers: [.command])
  //    static let captureViewHierarchy = Shortcut(id: "captureViewHierarchy:", key: .O, modifiers: [.command])
  //    static let colorBlendedLayers = Shortcut(id: "colorBlendedLayers:", key: .O, modifiers: [.command])
  //    static let colorHitsGreenAndMissesRed = Shortcut(id: "colorCached:", key: .O, modifiers: [.command])
  //    static let colorCopiedImages = Shortcut(id: "colorCopiedImages:", key: .O, modifiers: [.command])
  //    static let colorLayerFormats = Shortcut(id: "colorFormats:", key: .O, modifiers: [.command])
  //    static let colorImmediately = Shortcut(id: "colorImmediately:", key: .O, modifiers: [.command])
  //    static let colorMisalignedImages = Shortcut(id: "colorMisalignedImages:", key: .O, modifiers: [.command])
  //    static let colorOffscreen-renderedYellow = Shortcut(id: "colorOffscreenRenderedYellow:", key: .O, modifiers: [.command])
  //    static let colorCompositingFast-pathBlue = Shortcut(id: "colorOpenGLFastPathBlue:", key: .O, modifiers: [.command])
  //    static let configureEnvironmentOverrides‚Ä¶ = Shortcut(id: "configureEnvironmentOverrides:", key: .O, modifiers: [.command])
  //    static let disableAllEnvironmentOverrides = Shortcut(id: "disableAllEnvironmentOverrides:", key: .O, modifiers: [.command])
  //    static let flashUpdatedRegions = Shortcut(id: "flashUpdatedRegions:", key: .O, modifiers: [.command])
  //    static let showAlignmentRectangles = Shortcut(id: "showAlignmentRectangles:", key: .O, modifiers: [.command])
  //    static let showViewDrawing = Shortcut(id: "showDrawing:", key: .O, modifiers: [.command])
  //    static let showResponsiveScrollingStatus = Shortcut(id: "showResponsiveScrollingStatus:", key: .O, modifiers: [.command])
  //    static let showViewFrames = Shortcut(id: "showFrames:", key: .O, modifiers: [.command])
  //    static let showMemoryInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showObjectInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showSizeInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let analyzeGpuPerformance = Shortcut(id: "runInvestigatorWithExistingCapture:", key: .O, modifiers: [.command])
  //    static let releaseGpuFrame = Shortcut(id: "ReleaseGPUFrame:", key: .O, modifiers: [.command])
  //    static let stepToNextGpuCall = Shortcut(id: "stepToNextCall:", key: .O, modifiers: [.command])
  //    static let stepToNextDraw/dispatchCall = Shortcut(id: "stepToNextDisplayableCall:", key: .O, modifiers: [.command])
  //    static let stepToPreviousGpuCall = Shortcut(id: "stepToPreviousCall:", key: .O, modifiers: [.command])
  //    static let stepToPreviousDraw/dispatchCall = Shortcut(id: "stepToPreviousDisplayableCall:", key: .O, modifiers: [.command])
  //    static let reloadShaders = Shortcut(id: "updateShaders:", key: .O, modifiers: [.command])
  //    static let refreshDataModels = Shortcut(id: "reloadDataModels", key: .O, modifiers: [.command])
  //    static let updateDefaultMappings = Shortcut(id: "updateMappings", key: .O, modifiers: [.command])
  //    static let addModelVersion‚Ä¶ = Shortcut(id: "addModelVersion:", key: .O, modifiers: [.command])
  //    static let createNsmanagedobjectSubclass‚Ä¶ = Shortcut(id: "createNSManagedObjectSubclass:", key: .O, modifiers: [.command])
  //    static let import‚Ä¶ = Shortcut(id: "importMOMFile:", key: .O, modifiers: [.command])
  //    static let addAttribute = Shortcut(id: "addAttribute:", key: .O, modifiers: [.command])
  //    static let addConfiguration = Shortcut(id: "addConfiguration:", key: .O, modifiers: [.command])
  //    static let addEntity = Shortcut(id: "addEntity:", key: .O, modifiers: [.command])
  //    static let addFetchIndex = Shortcut(id: "addFetchIndex:", key: .O, modifiers: [.command])
  //    static let addFetchRequest = Shortcut(id: "addFetchRequest:", key: .O, modifiers: [.command])
  //    static let addFetchedProperty = Shortcut(id: "addFetchedProperty:", key: .O, modifiers: [.command])
  //    static let addRelationship = Shortcut(id: "addRelationship:", key: .O, modifiers: [.command])
  //    static let revealInNavigator = Shortcut(id: "revealInNavigator:", key: .O, modifiers: [.command])
  //    static let showObjective-cReferenceDocumentation = Shortcut(id: "documentation_showObjectiveCReferenceNavigator:", key: .O, modifiers: [.command])
  //    static let showOtherReferenceDocumentation = Shortcut(id: "documentation_showRESTReferenceNavigator:", key: .O, modifiers: [.command])
  //    static let showSwiftReferenceDocumentation = Shortcut(id: "documentation_showSwiftReferenceNavigator:", key: .O, modifiers: [.command])
  //    static let actualSize = Shortcut(id: "zoomActualSize:", key: .O, modifiers: [.command])
  //    static let zoomIn = Shortcut(id: "zoomIn:", key: .O, modifiers: [.command])
  //    static let zoomOut = Shortcut(id: "zoomOut:", key: .O, modifiers: [.command])
  //    static let 2 = Shortcut(id: "byteGrouping2:", key: .O, modifiers: [.command])
  //    static let 2 = Shortcut(id: "byteGrouping2:", key: .O, modifiers: [.command])
  //    static let 4 = Shortcut(id: "byteGrouping4:", key: .O, modifiers: [.command])
  //    static let 4 = Shortcut(id: "byteGrouping4:", key: .O, modifiers: [.command])
  //    static let 8 = Shortcut(id: "byteGrouping8:", key: .O, modifiers: [.command])
  //    static let 8 = Shortcut(id: "byteGrouping8:", key: .O, modifiers: [.command])
  //    static let 16 = Shortcut(id: "byteGrouping16:", key: .O, modifiers: [.command])
  //    static let 16 = Shortcut(id: "byteGrouping16:", key: .O, modifiers: [.command])
  //    static let 32 = Shortcut(id: "byteGrouping32:", key: .O, modifiers: [.command])
  //    static let 32 = Shortcut(id: "byteGrouping32:", key: .O, modifiers: [.command])
  //    static let extendSelection = Shortcut(id: "extendSelection:", key: .O, modifiers: [.command])
  //    static let extendSelection = Shortcut(id: "extendSelection:", key: .O, modifiers: [.command])
  //    static let hexadecimal = Shortcut(id: "hexadecimal:", key: .O, modifiers: [.command])
  //    static let hexadecimal = Shortcut(id: "hexadecimal:", key: .O, modifiers: [.command])
  //    static let lineOffsets = Shortcut(id: "lineNumbers:", key: .O, modifiers: [.command])
  //    static let lineOffsets = Shortcut(id: "lineNumbers:", key: .O, modifiers: [.command])
  //    static let moveSelection = Shortcut(id: "moveSelection:", key: .O, modifiers: [.command])
  //    static let moveSelection = Shortcut(id: "moveSelection:", key: .O, modifiers: [.command])
  //    static let none = Shortcut(id: "byteGroupingNone:", key: .O, modifiers: [.command])
  //    static let none = Shortcut(id: "byteGroupingNone:", key: .O, modifiers: [.command])
  //    static let overwriteMode = Shortcut(id: "toggleOverwriteMode:", key: .O, modifiers: [.command])
  //    static let overwriteMode = Shortcut(id: "toggleOverwriteMode:", key: .O, modifiers: [.command])
  //    static let plainText = Shortcut(id: "plainText:", key: .O, modifiers: [.command])
  //    static let plainText = Shortcut(id: "plainText:", key: .O, modifiers: [.command])
  //    static let newEnum = Shortcut(id: "_addEnumMenuItemPressed:", key: .O, modifiers: [.command])
  //    static let newIntent = Shortcut(id: "_addIntentMenuItemPressed:", key: .O, modifiers: [.command])
  //    static let newType = Shortcut(id: "_addTypeMenuItemPressed:", key: .O, modifiers: [.command])
  //    static let showIdentityInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let aboutXcode = Shortcut(id: "orderFrontAboutPanel:", key: .O, modifiers: [.command])
  //    static let activateConsole = Shortcut(id: "activateConsole:", key: .O, modifiers: [.command])
  //    static let add = Shortcut(id: "addCommand:", key: .O, modifiers: [.command])
  //    static let alignLeft = Shortcut(id: "alignLeft:", key: .O, modifiers: [.command])
  //    static let alignRight = Shortcut(id: "alignRight:", key: .O, modifiers: [.command])
  //    static let analyze = Shortcut(id: "analyzeActiveRunContext:", key: .O, modifiers: [.command])
  //    static let analyzeFile = Shortcut(id: "analyzeFile:", key: .O, modifiers: [.command])
  //    static let appStoreConnectHelp = Shortcut(id: "showAppStoreConnectHelp:", key: .O, modifiers: [.command])
  //    static let arrangeInFront = Shortcut(id: "alternateArrangeInFront:", key: .O, modifiers: [.command])
  //    static let attachToProcessByPidOrName‚Ä¶ = Shortcut(id: "attachByPIDOrName:", key: .O, modifiers: [.command])
  //    static let simulateBackgroundFetch = Shortcut(id: "backgroundFetchEvent:", key: .O, modifiers: [.command])
  //    static let lower = Shortcut(id: "lowerBaseline:", key: .O, modifiers: [.command])
  //    static let raise = Shortcut(id: "raiseBaseline:", key: .O, modifiers: [.command])
  //    static let subscript = Shortcut(id: "subscript:", key: .O, modifiers: [.command])
  //    static let superscript = Shortcut(id: "superscript:", key: .O, modifiers: [.command])
  //    static let useDefault = Shortcut(id: "unscript:", key: .O, modifiers: [.command])
  //    static let bigger = Shortcut(id: "modifyFontBigger:", key: .O, modifiers: [.command])
  //    static let bold = Shortcut(id: "addFontTraitBold:", key: .O, modifiers: [.command])
  //    static let bringAllToFront = Shortcut(id: "arrangeInFront:", key: .O, modifiers: [.command])
  //    static let build = Shortcut(id: "buildActiveRunContext:", key: .O, modifiers: [.command])
  //    static let archive = Shortcut(id: "buildAndArchiveActiveRunContext:", key: .O, modifiers: [.command])
  //    static let generateOptimizationProfile‚Ä¶ = Shortcut(id: "buildAndRunToGenerateOptimizationProfileActiveRunContext:", key: .O, modifiers: [.command])
  //    static let installing = Shortcut(id: "buildForInstallActiveRunContext:", key: .O, modifiers: [.command])
  //    static let profiling = Shortcut(id: "buildForProfileActiveScheme:", key: .O, modifiers: [.command])
  //    static let running = Shortcut(id: "buildForRunActiveRunContext:", key: .O, modifiers: [.command])
  //    static let testing = Shortcut(id: "buildForTestActiveRunContext:", key: .O, modifiers: [.command])
  //    static let buildWithTimingSummary = Shortcut(id: "buildActiveRunContextWithTimingSummary:", key: .O, modifiers: [.command])
  //    static let findCallHierarchy = Shortcut(id: "showCallHierarchy:", key: .O, modifiers: [.command])
  //    static let capitalize = Shortcut(id: "capitalizeWord:", key: .O, modifiers: [.command])
  //    static let captureGpuFrame = Shortcut(id: "captureGPUFrame:", key: .O, modifiers: [.command])
  //    static let center = Shortcut(id: "alignCenter:", key: .O, modifiers: [.command])
  //    static let checkDocumentNow = Shortcut(id: "checkSpelling:", key: .O, modifiers: [.command])
  //    static let checkGrammarWithSpelling = Shortcut(id: "toggleGrammarChecking:", key: .O, modifiers: [.command])
  //    static let checkSpellingWhileTyping = Shortcut(id: "toggleContinuousSpellChecking:", key: .O, modifiers: [.command])
  //    static let cherry-pick‚Ä¶ = Shortcut(id: "cherryPickCommand:", key: .O, modifiers: [.command])
  //    static let chooseDestination = Shortcut(id: "chooseDestination:", key: .O, modifiers: [.command])
  //    static let chooseScheme = Shortcut(id: "chooseScheme:", key: .O, modifiers: [.command])
  //    static let clean = Shortcut(id: "cleanActiveRunContext:", key: .O, modifiers: [.command])
  //    static let cleanBuildFolder‚Ä¶ = Shortcut(id: "cleanBuildFolder:", key: .O, modifiers: [.command])
  //    static let clearConsole = Shortcut(id: "clearConsole:", key: .O, modifiers: [.command])
  //    static let closeDocument = Shortcut(id: "closeDocument:", key: .O, modifiers: [.command])
  //    static let closeEditor = Shortcut(id: "_closeActiveEditor:", key: .O, modifiers: [.command])
  //    static let closeOtherEditors = Shortcut(id: "closeOtherEditors:", key: .O, modifiers: [.command])
  //    static let closeOtherTabs = Shortcut(id: "closeOtherTabs:", key: .O, modifiers: [.command])
  //    static let closeOtherWindows = Shortcut(id: "closeOtherWindows:", key: .O, modifiers: [.command])
  //    static let closeTab = Shortcut(id: "closeWindowAsTab:", key: .O, modifiers: [.command])
  //    static let closeWindow = Shortcut(id: "dvt_performCloseWindow:", key: .O, modifiers: [.command])
  //    static let closeWorkspace = Shortcut(id: "performCloseWorkspace:", key: .O, modifiers: [.command])
  //    static let commit‚Ä¶ = Shortcut(id: "commitCommand:", key: .O, modifiers: [.command])
  //    static let compileFile = Shortcut(id: "compileFile:", key: .O, modifiers: [.command])
  //    static let continueToCurrentLine = Shortcut(id: "continueToCurrentLine:", key: .O, modifiers: [.command])
  //    static let toCurrentSwiftSyntax‚Ä¶ = Shortcut(id: "showSwiftMigrationAssistant:", key: .O, modifiers: [.command])
  //    static let toObjective-cArc‚Ä¶ = Shortcut(id: "showARCConversionAssistant:", key: .O, modifiers: [.command])
  //    static let toModernObjective-cSyntax‚Ä¶ = Shortcut(id: "showModernObjectiveCConversionAssistant:", key: .O, modifiers: [.command])
  //    static let copy = Shortcut(id: "copy:", key: .O, modifiers: [.command])
  //    static let copyQualifiedSymbolName = Shortcut(id: "copyQualifiedSymbolName:", key: .O, modifiers: [.command])
  //    static let copyRuler = Shortcut(id: "copyRuler:", key: .O, modifiers: [.command])
  //    static let copyStyle = Shortcut(id: "copyFont:", key: .O, modifiers: [.command])
  //    static let copySymbolName = Shortcut(id: "copySymbolName:", key: .O, modifiers: [.command])
  //    static let correctSpellingAutomatically = Shortcut(id: "toggleAutomaticSpellingCorrection:", key: .O, modifiers: [.command])
  //    static let createBot‚Ä¶ = Shortcut(id: "createBot:", key: .O, modifiers: [.command])
  //    static let createCodeSnippet = Shortcut(id: "createCodeSnippetFromSelection:", key: .O, modifiers: [.command])
  //    static let createExceptionBreakpoint‚Ä¶ = Shortcut(id: "createExceptionBreakpoint:", key: .O, modifiers: [.command])
  //    static let createPullRequest‚Ä¶ = Shortcut(id: "createPullRequestCommand:", key: .O, modifiers: [.command])
  //    static let createSwiftErrorBreakpoint = Shortcut(id: "createSwiftErrorBreakpoint:", key: .O, modifiers: [.command])
  //    static let createSymbolicBreakpoint‚Ä¶ = Shortcut(id: "createSymbolicBreakpoint:", key: .O, modifiers: [.command])
  //    static let createTestFailureBreakpoint = Shortcut(id: "createTestFailureBreakpoint:", key: .O, modifiers: [.command])
  //    static let createGitRepositories‚Ä¶ = Shortcut(id: "createWorkingCopyCommand:", key: .O, modifiers: [.command])
  //    static let cut = Shortcut(id: "cut:", key: .O, modifiers: [.command])
  //    static let dataDetectors = Shortcut(id: "toggleAutomaticDataDetection:", key: .O, modifiers: [.command])
  //    static let showDebugArea = Shortcut(id: "toggleDebuggerVisibility:", key: .O, modifiers: [.command])
  //    static let delete = Shortcut(id: "delete:", key: .O, modifiers: [.command])
  //    static let deleteAllBreakpoints = Shortcut(id: "deleteAllBreakpoints:", key: .O, modifiers: [.command])
  //    static let detach = Shortcut(id: "detach:", key: .O, modifiers: [.command])
  //    static let developerAccountHelp = Shortcut(id: "showDeveloperAccountHelp:", key: .O, modifiers: [.command])
  //    static let developerDocumentation = Shortcut(id: "windowMenu_showDocumentation:", key: .O, modifiers: [.command])
  //    static let developerDocumentation = Shortcut(id: "windowMenu_showDocumentation:", key: .O, modifiers: [.command])
  //    static let devicesAndSimulators = Shortcut(id: "showDevicesWindow:", key: .O, modifiers: [.command])
  //    static let duplicate = Shortcut(id: "duplicate:", key: .O, modifiers: [.command])
  //    static let duplicate‚Ä¶ = Shortcut(id: "ide_duplicateDocument:", key: .O, modifiers: [.command])
  //    static let editScheme‚Ä¶ = Shortcut(id: "editActiveRunContext:", key: .O, modifiers: [.command])
  //    static let editBehaviors‚Ä¶ = Shortcut(id: "editAlerts:", key: .O, modifiers: [.command])
  //    static let analyze‚Ä¶ = Shortcut(id: "editAndAnalyzeActiveRunContext:", key: .O, modifiers: [.command])
  //    static let profile‚Ä¶ = Shortcut(id: "editAndProfileActiveScheme:", key: .O, modifiers: [.command])
  //    static let run‚Ä¶ = Shortcut(id: "editAndRunActiveRunContext:", key: .O, modifiers: [.command])
  //    static let test‚Ä¶ = Shortcut(id: "editAndTestActiveRunContext:", key: .O, modifiers: [.command])
  //    static let archive‚Ä¶ = Shortcut(id: "editBuildAndArchiveActiveRunContext:", key: .O, modifiers: [.command])
  //    static let workspaceSettings‚Ä¶ = Shortcut(id: "editWorkspaceUserSettings:", key: .O, modifiers: [.command])
  //    static let enable/disableBreakpointAtCurrentLine = Shortcut(id: "enableDisableBreakpointAtCurrentLine:", key: .O, modifiers: [.command])
  //    static let export‚Ä¶ = Shortcut(id: "exportDocument:", key: .O, modifiers: [.command])
  //    static let fetchChanges = Shortcut(id: "fetchChangesCommand:", key: .O, modifiers: [.command])
  //    static let filterInNavigator = Shortcut(id: "filterInNavigator:", key: .O, modifiers: [.command])
  //    static let find‚Ä¶ = Shortcut(id: "find:", key: .O, modifiers: [.command])
  //    static let findAndReplace‚Ä¶ = Shortcut(id: "findAndReplace:", key: .O, modifiers: [.command])
  //    static let findAndSelectNext = Shortcut(id: "findAndSelectNext:", key: .O, modifiers: [.command])
  //    static let findAndSelectPrevious = Shortcut(id: "findAndSelectPrevious:", key: .O, modifiers: [.command])
  //    static let findNext = Shortcut(id: "findNext:", key: .O, modifiers: [.command])
  //    static let findPrevious = Shortcut(id: "findPrevious:", key: .O, modifiers: [.command])
  //    static let findSelectedSymbolInWorkspace = Shortcut(id: "findSelectedSymbolInWorkspace:", key: .O, modifiers: [.command])
  //    static let findSelectedTextInWorkspace = Shortcut(id: "findSelectedTextInWorkspace:", key: .O, modifiers: [.command])
  //    static let fixNextIssue = Shortcut(id: "fixNextIssue:", key: .O, modifiers: [.command])
  //    static let fixPreviousIssue = Shortcut(id: "fixPreviousIssue:", key: .O, modifiers: [.command])
  //    static let assembleFile = Shortcut(id: "showAssemblyCodeForFile:", key: .O, modifiers: [.command])
  //    static let preprocessFile = Shortcut(id: "preprocessFile:", key: .O, modifiers: [.command])
  //    static let goBack = Shortcut(id: "goBackInHistoryByCommand:", key: .O, modifiers: [.command])
  //    static let goBack(option) = Shortcut(id: "goBackInHistoryByCommandWithAlternate:", key: .O, modifiers: [.command])
  //    static let goBack(shift+option) = Shortcut(id: "goBackInHistoryByCommandWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let goForward = Shortcut(id: "goForwardInHistoryByCommand:", key: .O, modifiers: [.command])
  //    static let goForward(option) = Shortcut(id: "goForwardInHistoryByCommandWithAlternate:", key: .O, modifiers: [.command])
  //    static let goForward(shift+option) = Shortcut(id: "goForwardInHistoryByCommandWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let hideXcode = Shortcut(id: "hide:", key: .O, modifiers: [.command])
  //    static let hideFindBar = Shortcut(id: "hideFindBar:", key: .O, modifiers: [.command])
  //    static let hideOthers = Shortcut(id: "hideOtherApplications:", key: .O, modifiers: [.command])
  //    static let showQuickHelpForSelectedItem = Shortcut(id: "showQuickHelp:", key: .O, modifiers: [.command])
  //    static let showInspectors = Shortcut(id: "toggleInspectorAreaVisibility:", key: .O, modifiers: [.command])
  //    static let copyToDevice(internalOnly) = Shortcut(id: "installActiveRunContext:", key: .O, modifiers: [.command])
  //    static let italics = Shortcut(id: "addFontTraitItalics:", key: .O, modifiers: [.command])
  //    static let jumpToOriginalSource/generatedInterface = Shortcut(id: "jumpBetweenSourceFileAndGeneratedFile:", key: .O, modifiers: [.command])
  //    static let jumpTo‚Ä¶ = Shortcut(id: "jumpToLine:", key: .O, modifiers: [.command])
  //    static let jumpTo‚Ä¶ = Shortcut(id: "jumpToLine:", key: .O, modifiers: [.command])
  //    static let jumpTo‚Ä¶ = Shortcut(id: "jumpToLine:", key: .O, modifiers: [.command])
  //    static let jumpTo‚Ä¶ = Shortcut(id: "jumpToLine:", key: .O, modifiers: [.command])
  //    static let jumpTo‚Ä¶ = Shortcut(id: "jumpToLine:", key: .O, modifiers: [.command])
  //    static let jumpTo‚Ä¶ = Shortcut(id: "jumpToLine:", key: .O, modifiers: [.command])
  //    static let jumpToDefinition(option) = Shortcut(id: "editorContext_jumpToDefinitionWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToDefinition(shift+option) = Shortcut(id: "editorContext_jumpToDefinitionWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToInstructionPointer = Shortcut(id: "jumpToInstructionPointer:", key: .O, modifiers: [.command])
  //    static let jumpToLastDestination = Shortcut(id: "jumpToLastDestination:", key: .O, modifiers: [.command])
  //    static let jumpToNextIssue = Shortcut(id: "jumpToNextIssue:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousIssue = Shortcut(id: "jumpToPreviousIssue:", key: .O, modifiers: [.command])
  //    static let jumpToSelection = Shortcut(id: "jumpToSelection:", key: .O, modifiers: [.command])
  //    static let justify = Shortcut(id: "alignJustified:", key: .O, modifiers: [.command])
  //    static let loosen = Shortcut(id: "loosenKerning:", key: .O, modifiers: [.command])
  //    static let tighten = Shortcut(id: "tightenKerning:", key: .O, modifiers: [.command])
  //    static let useDefault = Shortcut(id: "useStandardKerning:", key: .O, modifiers: [.command])
  //    static let useNone = Shortcut(id: "turnOffKerning:", key: .O, modifiers: [.command])
  //    static let openLibrary = Shortcut(id: "openLibrary:", key: .O, modifiers: [.command])
  //    static let showLibrary = Shortcut(id: "showLibrary:", key: .O, modifiers: [.command])
  //    static let useAll = Shortcut(id: "useAllLigatures:", key: .O, modifiers: [.command])
  //    static let useDefault = Shortcut(id: "useStandardLigatures:", key: .O, modifiers: [.command])
  //    static let useNone = Shortcut(id: "turnOffLigatures:", key: .O, modifiers: [.command])
  //    static let makeLowerCase = Shortcut(id: "lowercaseWord:", key: .O, modifiers: [.command])
  //    static let makeUpperCase = Shortcut(id: "uppercaseWord:", key: .O, modifiers: [.command])
  //    static let manageSchemes‚Ä¶ = Shortcut(id: "manageRunContexts:", key: .O, modifiers: [.command])
  //    static let mergeAllWindows = Shortcut(id: "mergeAllWindows:", key: .O, modifiers: [.command])
  //    static let minimize = Shortcut(id: "performMiniaturize:", key: .O, modifiers: [.command])
  //    static let minimizeAll = Shortcut(id: "miniaturizeAll:", key: .O, modifiers: [.command])
  //    static let moveFocusToEditor‚Ä¶ = Shortcut(id: "moveFocusToEditor:", key: .O, modifiers: [.command])
  //    static let moveFocusToNextArea = Shortcut(id: "moveKeyboardFocusToNextArea:", key: .O, modifiers: [.command])
  //    static let moveFocusToNextEditor = Shortcut(id: "moveKeyboardFocusToNextEditor:", key: .O, modifiers: [.command])
  //    static let moveFocusToPreviousArea = Shortcut(id: "moveKeyboardFocusToPreviousArea:", key: .O, modifiers: [.command])
  //    static let moveFocusToPreviousEditor = Shortcut(id: "moveKeyboardFocusToPreviousEditor:", key: .O, modifiers: [.command])
  //    static let moveTabToNewWindow = Shortcut(id: "moveTabToNewWindow:", key: .O, modifiers: [.command])
  //    static let findNextInWorkspace = Shortcut(id: "navigateToNextFindResult:", key: .O, modifiers: [.command])
  //    static let findPreviousInWorkspace = Shortcut(id: "navigateToPreviousFindResult:", key: .O, modifiers: [.command])
  //    static let showBreakpointNavigator = Shortcut(id: "changeToBreakpointsNavigator:", key: .O, modifiers: [.command])
  //    static let showDebugNavigator = Shortcut(id: "changeToDebuggerNavigator:", key: .O, modifiers: [.command])
  //    static let showFindNavigator = Shortcut(id: "changeToFindNavigator:", key: .O, modifiers: [.command])
  //    static let showIssueNavigator = Shortcut(id: "changeToIssuesNavigator:", key: .O, modifiers: [.command])
  //    static let showReportNavigator = Shortcut(id: "changeToLogsNavigator:", key: .O, modifiers: [.command])
  //    static let showProjectNavigator = Shortcut(id: "changeToStructureNavigator:", key: .O, modifiers: [.command])
  //    static let showSymbolNavigator = Shortcut(id: "changeToSymbolsNavigator:", key: .O, modifiers: [.command])
  //    static let showTestNavigator = Shortcut(id: "changeToTestNavigator:", key: .O, modifiers: [.command])
  //    static let showNavigator = Shortcut(id: "toggleNavigatorsVisibility:", key: .O, modifiers: [.command])
  //    static let showSourceControlNavigator = Shortcut(id: "changeToWorkingCopiesNavigator:", key: .O, modifiers: [.command])
  //    static let editor = Shortcut(id: "tabController_newEditorAreaSplit:", key: .O, modifiers: [.command])
  //    static let editorBelow = Shortcut(id: "tabController_newEditorAreaSplitAlternate:", key: .O, modifiers: [.command])
  //    static let folder = Shortcut(id: "newFolder:", key: .O, modifiers: [.command])
  //    static let folderFromSelection = Shortcut(id: "newFolderWithSelected:", key: .O, modifiers: [.command])
  //    static let group = Shortcut(id: "newGroup:", key: .O, modifiers: [.command])
  //    static let groupFromSelection = Shortcut(id: "groupSelected:", key: .O, modifiers: [.command])
  //    static let groupWithFolder = Shortcut(id: "newGroupWithFolder:", key: .O, modifiers: [.command])
  //    static let groupWithoutFolder = Shortcut(id: "newGroupWithoutFolder:", key: .O, modifiers: [.command])
  //    static let swiftPackage‚Ä¶ = Shortcut(id: "newPackage:", key: .O, modifiers: [.command])
  //    static let project‚Ä¶ = Shortcut(id: "newProject:", key: .O, modifiers: [.command])
  //    static let newScheme‚Ä¶ = Shortcut(id: "newRunContext:", key: .O, modifiers: [.command])
  //    static let tab = Shortcut(id: "newTab:", key: .O, modifiers: [.command])
  //    static let target‚Ä¶ = Shortcut(id: "newTarget:", key: .O, modifiers: [.command])
  //    static let window = Shortcut(id: "newWindow:", key: .O, modifiers: [.command])
  //    static let workspace‚Ä¶ = Shortcut(id: "newWorkspace:", key: .O, modifiers: [.command])
  //    static let selectNextDestination = Shortcut(id: "selectNextDestination:", key: .O, modifiers: [.command])
  //    static let selectNextScheme = Shortcut(id: "selectNextRunContext:", key: .O, modifiers: [.command])

  //    static let openIn‚Ä¶ = Shortcut(id: "openInAdjacentEditorWithAlternate:", key: .O, modifiers: [.command])
  //    static let openIn‚Ä¶ = Shortcut(id: "openInAdjacentEditorWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let openInNewTab = Shortcut(id: "openInNewTab:", key: .O, modifiers: [.command])
  //    static let openInNewWindow = Shortcut(id: "openInNewWindow:", key: .O, modifiers: [.command])

  //    static let openWithExternalEditor = Shortcut(id: "openWithExternalEditor:", key: .O, modifiers: [.command])
  //    static let outline = Shortcut(id: "outline:", key: .O, modifiers: [.command])
  //    static let paragraph = Shortcut(id: "nullParagraph:", key: .O, modifiers: [.command])
  //    static let ¬†¬†¬†default = Shortcut(id: "makeBaseWritingDirectionNatural:", key: .O, modifiers: [.command])
  //    static let ¬†¬†¬†leftToRight = Shortcut(id: "makeBaseWritingDirectionLeftToRight:", key: .O, modifiers: [.command])
  //    static let ¬†¬†¬†rightToLeft = Shortcut(id: "makeBaseWritingDirectionRightToLeft:", key: .O, modifiers: [.command])
  //    static let paste = Shortcut(id: "paste:", key: .O, modifiers: [.command])
  //    static let pasteAndPreserveFormatting = Shortcut(id: "pasteAndPreserveFormatting:", key: .O, modifiers: [.command])
  //    static let pasteRuler = Shortcut(id: "pasteRuler:", key: .O, modifiers: [.command])
  //    static let pasteStyle = Shortcut(id: "pasteFont:", key: .O, modifiers: [.command])
  //    static let pause/Continue = Shortcut(id: "pauseOrContinue:", key: .O, modifiers: [.command])
  //    static let preferences‚Ä¶ = Shortcut(id: "showPreferencesPanel:", key: .O, modifiers: [.command])
  //    static let selectPreviousDestination = Shortcut(id: "selectPreviousDestination:", key: .O, modifiers: [.command])
  //    static let selectPreviousScheme = Shortcut(id: "selectPreviousRunContext:", key: .O, modifiers: [.command])
  //    static let print‚Ä¶ = Shortcut(id: "printDocument:", key: .O, modifiers: [.command])
  //    static let organizer = Shortcut(id: "windowMenu_showProducts:", key: .O, modifiers: [.command])
  //    static let profile = Shortcut(id: "profileActiveScheme:", key: .O, modifiers: [.command])
  //    static let profileAgain = Shortcut(id: "profileAgain:", key: .O, modifiers: [.command])
  //    static let profile = Shortcut(id: "profileSelectedItems:", key: .O, modifiers: [.command])
  //    static let profileWithoutBuilding = Shortcut(id: "profileActiveSchemeWithoutBuilding:", key: .O, modifiers: [.command])
  //    static let push‚Ä¶ = Shortcut(id: "pushCommand:", key: .O, modifiers: [.command])
  //    static let quitXcode = Shortcut(id: "terminate:", key: .O, modifiers: [.command])
  //    static let redo = Shortcut(id: "redo:", key: .O, modifiers: [.command])
  //    static let refreshFileStatus = Shortcut(id: "refreshFileStatusCommand:", key: .O, modifiers: [.command])
  //    static let releaseNotes = Shortcut(id: "showXcodeReleaseNotes:", key: .O, modifiers: [.command])
  //    static let reloadConsole = Shortcut(id: "reloadConsole:", key: .O, modifiers: [.command])
  //    static let renameTab‚Ä¶ = Shortcut(id: "renameCurrentTab:", key: .O, modifiers: [.command])
  //    static let replace = Shortcut(id: "replace:", key: .O, modifiers: [.command])
  //    static let replaceAll = Shortcut(id: "replaceAll:", key: .O, modifiers: [.command])
  //    static let replaceAndFindNext = Shortcut(id: "replaceAndFindNext:", key: .O, modifiers: [.command])
  //    static let replaceAndFindPrevious = Shortcut(id: "replaceAndFindPrevious:", key: .O, modifiers: [.command])
  //    static let reportAnIssue = Shortcut(id: "reportIssueToApple:", key: .O, modifiers: [.command])
  //    static let resetAssistantSelection = Shortcut(id: "resetAssistantEditorSelection:", key: .O, modifiers: [.command])
  //    static let resetEditorSizes = Shortcut(id: "resetEditorSizes:", key: .O, modifiers: [.command])
  //    static let resetPackageCaches = Shortcut(id: "resetPackageDependencyGraph:", key: .O, modifiers: [.command])
  //    static let resolvePackageVersions = Shortcut(id: "resolvePackageVersions:", key: .O, modifiers: [.command])
  //    static let markAsResolved = Shortcut(id: "resolvedCommand:", key: .O, modifiers: [.command])
  //    static let revealInDebugNavigator = Shortcut(id: "revealInDebugNavigator:", key: .O, modifiers: [.command])
  //    static let revealInProjectNavigator = Shortcut(id: "revealInProjectNavigator:", key: .O, modifiers: [.command])
  //    static let revealInSymbolNavigator = Shortcut(id: "revealInSymbolNavigator:", key: .O, modifiers: [.command])
  //    static let revertToSaved‚Ä¶ = Shortcut(id: "ide_revertDocumentToSaved:", key: .O, modifiers: [.command])
  //    static let discardChangesInSelectedFiles‚Ä¶ = Shortcut(id: "revertSelectedFilesCommand:", key: .O, modifiers: [.command])
  //    static let discardAllChanges‚Ä¶ = Shortcut(id: "revertWorkingCopiesCommand:", key: .O, modifiers: [.command])
  //    static let run = Shortcut(id: "runActiveRunContext:", key: .O, modifiers: [.command])
  //    static let runWithoutBuilding = Shortcut(id: "runActiveRunContextWithoutBuilding:", key: .O, modifiers: [.command])
  //    static let clone‚Ä¶ = Shortcut(id: "scmDownload:", key: .O, modifiers: [.command])
  //    static let saveAll = Shortcut(id: "saveAllEditorDocuments:", key: .O, modifiers: [.command])
  //    static let saveAsWorkspace‚Ä¶ = Shortcut(id: "saveAsWorkspace:", key: .O, modifiers: [.command])
  //    static let save = Shortcut(id: "ide_saveDocument:", key: .O, modifiers: [.command])
  //    static let saveAs‚Ä¶ = Shortcut(id: "ide_saveDocumentAs:", key: .O, modifiers: [.command])
  //    static let searchDocumentationForSelectedText = Shortcut(id: "searchDocumentationForSelectedText:", key: .O, modifiers: [.command])
  //    static let selectAll = Shortcut(id: "selectAll:", key: .O, modifiers: [.command])
  //    static let selectAllFindMatches = Shortcut(id: "selectAllFindMatches:", key: .O, modifiers: [.command])
  //    static let selectFindMatchesInSelection = Shortcut(id: "selectFindMatchesInSelection:", key: .O, modifiers: [.command])
  //    static let selectNextOccurrence = Shortcut(id: "selectNextOccurrence:", key: .O, modifiers: [.command])
  //    static let selectPreviousOccurrence = Shortcut(id: "selectPreviousOccurrence:", key: .O, modifiers: [.command])
  //    static let selection = Shortcut(id: "nullSelection:", key: .O, modifiers: [.command])
  //    static let ¬†¬†¬†default = Shortcut(id: "makeTextWritingDirectionNatural:", key: .O, modifiers: [.command])
  //    static let ¬†¬†¬†leftToRight = Shortcut(id: "makeTextWritingDirectionLeftToRight:", key: .O, modifiers: [.command])
  //    static let ¬†¬†¬†rightToLeft = Shortcut(id: "makeTextWritingDirectionRightToLeft:", key: .O, modifiers: [.command])
  //    static let sharedLibraries... = Shortcut(id: "showSharedLibrariesPopUp:", key: .O, modifiers: [.command])
  //    static let showAll = Shortcut(id: "unhideAllApplications:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let assistant = Shortcut(id: "_toggleShowAssistantMode:", key: .O, modifiers: [.command])
  //    static let showColors = Shortcut(id: "orderFrontColorPanel:", key: .O, modifiers: [.command])
  //    static let alwaysShowDisassembly = Shortcut(id: "setShowDisassemblyWhenDebugging:", key: .O, modifiers: [.command])
  //    static let showDocumentItems = Shortcut(id: "showDocumentItemsMenu:", key: .O, modifiers: [.command])
  //    static let showFonts = Shortcut(id: "orderFrontFontPanel:", key: .O, modifiers: [.command])
  //    static let showGroupFiles = Shortcut(id: "showGroupFilesMenu:", key: .O, modifiers: [.command])
  //    static let showInFinder = Shortcut(id: "showInFinder:", key: .O, modifiers: [.command])
  //    static let showNextFilesHistory = Shortcut(id: "showNextFilesHistoryMenu:", key: .O, modifiers: [.command])
  //    static let showNextHistory = Shortcut(id: "showNextHistoryMenu:", key: .O, modifiers: [.command])
  //    static let showNextTab = Shortcut(id: "selectNextTab:", key: .O, modifiers: [.command])
  //    static let preview = Shortcut(id: "_toggleShowPreviewMode:", key: .O, modifiers: [.command])
  //    static let preview = Shortcut(id: "_toggleShowPreviewMode:", key: .O, modifiers: [.command])
  //    static let preview = Shortcut(id: "_toggleShowPreviewMode:", key: .O, modifiers: [.command])
  //    static let preview = Shortcut(id: "_toggleShowPreviewMode:", key: .O, modifiers: [.command])
  //    static let showPreviousFilesHistory = Shortcut(id: "showPreviousFilesHistoryMenu:", key: .O, modifiers: [.command])
  //    static let showPreviousHistory = Shortcut(id: "showPreviousHistoryMenu:", key: .O, modifiers: [.command])
  //    static let showPreviousTab = Shortcut(id: "selectPreviousTab:", key: .O, modifiers: [.command])
  //    static let showRelatedItems = Shortcut(id: "showRelatedItemsMenu:", key: .O, modifiers: [.command])
  //    static let showRuler = Shortcut(id: "toggleRuler:", key: .O, modifiers: [.command])
  //    static let showSpellingAndGrammar = Shortcut(id: "showGuessPanel:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showEditorOnly = Shortcut(id: "_showEditorOnly:", key: .O, modifiers: [.command])
  //    static let showSubstitutions = Shortcut(id: "orderFrontSubstitutionsPanel:", key: .O, modifiers: [.command])
  //    static let showTopLevelItems = Shortcut(id: "showTopLevelItemsMenu:", key: .O, modifiers: [.command])
  //    static let simulateMetrickitPayloads = Shortcut(id: "simulateMetricPayloads:", key: .O, modifiers: [.command])
  //    static let smaller = Shortcut(id: "modifyFontSmaller:", key: .O, modifiers: [.command])
  //    static let smartCopy/paste = Shortcut(id: "toggleSmartInsertDelete:", key: .O, modifiers: [.command])
  //    static let smartDashes = Shortcut(id: "toggleAutomaticDashSubstitution:", key: .O, modifiers: [.command])
  //    static let smartLinks = Shortcut(id: "toggleAutomaticLinkDetection:", key: .O, modifiers: [.command])
  //    static let smartQuotes = Shortcut(id: "toggleAutomaticQuoteSubstitution:", key: .O, modifiers: [.command])
  //    static let byName = Shortcut(id: "sortFilesByName:", key: .O, modifiers: [.command])
  //    static let byType = Shortcut(id: "sortFilesByType:", key: .O, modifiers: [.command])
  //    static let pasteSpecial = Shortcut(id: "specialPaste:", key: .O, modifiers: [.command])
  //    static let startSpeaking = Shortcut(id: "startSpeaking:", key: .O, modifiers: [.command])
  //    static let stashChanges‚Ä¶ = Shortcut(id: "stashCommand:", key: .O, modifiers: [.command])
  //    static let stepInto = Shortcut(id: "stepInto:", key: .O, modifiers: [.command])
  //    static let stepIntoInstruction = Shortcut(id: "stepIntoInstruction:", key: .O, modifiers: [.command])
  //    static let stepIntoThread = Shortcut(id: "stepIntoThread:", key: .O, modifiers: [.command])
  //    static let stepOut = Shortcut(id: "stepOut:", key: .O, modifiers: [.command])
  //    static let stepOver = Shortcut(id: "stepOver:", key: .O, modifiers: [.command])
  //    static let stepOverInstruction = Shortcut(id: "stepOverInstruction:", key: .O, modifiers: [.command])
  //    static let stepOverThread = Shortcut(id: "stepOverThread:", key: .O, modifiers: [.command])
  //    static let stop = Shortcut(id: "cancelCurrentExecution:", key: .O, modifiers: [.command])
  //    static let stopSpeaking = Shortcut(id: "stopSpeaking:", key: .O, modifiers: [.command])
  //    static let showStyles‚Ä¶ = Shortcut(id: "orderFrontStylesPanel:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let automatic = Shortcut(id: "_setSubEditorPositionToAutomatic:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnTop = Shortcut(id: "_setSubEditorPositionToBelow:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let editorOnLeft = Shortcut(id: "_setSubEditorPositionToOnRight:", key: .O, modifiers: [.command])
  //    static let swiftProgrammingLanguageBook = Shortcut(id: "showSwiftProgrammingLanguageBook:", key: .O, modifiers: [.command])
  //    static let takeScreenshotOfActiveDevice = Shortcut(id: "takeScreenshot:", key: .O, modifiers: [.command])
  //    static let test = Shortcut(id: "testActiveRunContext:", key: .O, modifiers: [.command])
  //    static let testAgain = Shortcut(id: "testAgain:", key: .O, modifiers: [.command])
  //    static let test = Shortcut(id: "testSelectedItems:", key: .O, modifiers: [.command])
  //    static let testWithoutBuilding = Shortcut(id: "testActiveRunContextWithoutBuilding:", key: .O, modifiers: [.command])
  //    static let textReplacement = Shortcut(id: "toggleAutomaticTextReplacement:", key: .O, modifiers: [.command])
  //    static let addBreakpointAtCurrentLine = Shortcut(id: "toggleBreakpointAtCurrentLine:", key: .O, modifiers: [.command])
  //    static let activateBreakpoints = Shortcut(id: "toggleBreakpoints:", key: .O, modifiers: [.command])
  //    static let changeEditorOrientation = Shortcut(id: "toggleEditorOrientation:", key: .O, modifiers: [.command])
  //    static let focus = Shortcut(id: "_toggleMaximizeEditor:", key: .O, modifiers: [.command])
  //    static let enterFullScreen = Shortcut(id: "toggleFullScreen:", key: .O, modifiers: [.command])
  //    static let startRecordingUiTest = Shortcut(id: "toggleRecordingUITest:", key: .O, modifiers: [.command])
  //    static let showCodeReview = Shortcut(id: "_toggleShowCodeReviewForEditor:", key: .O, modifiers: [.command])
  //    static let showTabBar = Shortcut(id: "toggleTabBar:", key: .O, modifiers: [.command])
  //    static let showAllTabs = Shortcut(id: "toggleTabOverview:", key: .O, modifiers: [.command])
  //    static let showToolbar = Shortcut(id: "toggleToolbarShown:", key: .O, modifiers: [.command])
  //    static let simulateUiSnapshot = Shortcut(id: "uiSnapshotRefresh:", key: .O, modifiers: [.command])
  //    static let underline = Shortcut(id: "underline:", key: .O, modifiers: [.command])
  //    static let undo = Shortcut(id: "undo:", key: .O, modifiers: [.command])
  //    static let unlock‚Ä¶ = Shortcut(id: "ide_unlockDocument:", key: .O, modifiers: [.command])
  //    static let pull‚Ä¶ = Shortcut(id: "updateCommand:", key: .O, modifiers: [.command])
  //    static let updateToLatestPackageVersions = Shortcut(id: "updateToLatestPackageVersions:", key: .O, modifiers: [.command])
  //    static let useSelectionForFind = Shortcut(id: "useSelectionForFind:", key: .O, modifiers: [.command])
  //    static let useSelectionForReplace = Shortcut(id: "useSelectionForReplace:", key: .O, modifiers: [.command])
  //    static let viewMemory = Shortcut(id: "viewMemory:", key: .O, modifiers: [.command])
  //    static let welcomeToXcode = Shortcut(id: "showWelcomeToXcode:", key: .O, modifiers: [.command])
  //    static let what‚ÄôsNewInXcode = Shortcut(id: "showWhatsNewInXcode:", key: .O, modifiers: [.command])
  //    static let xcodeExtensions‚Ä¶ = Shortcut(id: "showXcodeExtensions:", key: .O, modifiers: [.command])
  //    static let xcodeHelp = Shortcut(id: "showHelp:", key: .O, modifiers: [.command])
  //    static let xcodeServer‚Ä¶ = Shortcut(id: "showXcodeServerPrefencePane:", key: .O, modifiers: [.command])
  //    static let zoom = Shortcut(id: "performZoom:", key: .O, modifiers: [.command])
  //    static let zoomAll = Shortcut(id: "zoomAll:", key: .O, modifiers: [.command])
  //    static let showFileInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showQuickHelpInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let collapseAllTranscripts = Shortcut(id: "menuCmd_collapseAllTranscripts:", key: .O, modifiers: [.command])
  //    static let collapseSelectedTranscripts = Shortcut(id: "menuCmd_collapseSelectedTranscripts:", key: .O, modifiers: [.command])
  //    static let openInWorkspace = Shortcut(id: "menuCmd_openInWorkspace:", key: .O, modifiers: [.command])
  //    static let openInWorkspace = Shortcut(id: "menuCmd_openInWorkspace:", key: .O, modifiers: [.command])
  //    static let copySelectedTranscripts = Shortcut(id: "menuCmd_copySelectedTranscripts:", key: .O, modifiers: [.command])
  //    static let copyTranscriptOfShownResults = Shortcut(id: "menuCmd_copyShownTranscripts:", key: .O, modifiers: [.command])
  //    static let expandAllTranscripts = Shortcut(id: "menuCmd_expandAllTranscripts:", key: .O, modifiers: [.command])
  //    static let expandSelectedTranscripts = Shortcut(id: "menuCmd_expandSelectedTranscripts:", key: .O, modifiers: [.command])
  //    static let showAllIssues = Shortcut(id: "menuCmd_showAllIssues:", key: .O, modifiers: [.command])
  //    static let showAllMessages = Shortcut(id: "menuCmd_showAllMessages:", key: .O, modifiers: [.command])
  //    static let showAllResults = Shortcut(id: "menuCmd_showAllResults:", key: .O, modifiers: [.command])
  //    static let showErrorsOnly = Shortcut(id: "menuCmd_showErrorsOnly:", key: .O, modifiers: [.command])
  //    static let showRecentResults = Shortcut(id: "menuCmd_showRecentResults:", key: .O, modifiers: [.command])
  //     static let addDocumentation = Shortcut(id: "addDocumentation:", key: .slash, modifiers: [.option, .command])
  //     static let addDocumentation = Shortcut(id: "addDocumentation:", key: .slash, modifiers: [.option, .command])
  //     static let addDocumentation = Shortcut(id: "addDocumentation:", key: .slash, modifiers: [.option, .command])

  //    static let allIssues = Shortcut(id: "showAllIssues:", key: .O, modifiers: [.command])
  //    static let allIssues = Shortcut(id: "showAllIssues:", key: .O, modifiers: [.command])
  //    static let allIssues = Shortcut(id: "showAllIssues:", key: .O, modifiers: [.command])
  //    static let allIssues = Shortcut(id: "showAllIssues:", key: .O, modifiers: [.command])
  //    static let balanceDelimiters = Shortcut(id: "balance:", key: .O, modifiers: [.command])
  //    static let balanceDelimiters = Shortcut(id: "balance:", key: .O, modifiers: [.command])
  //    static let balanceDelimiters = Shortcut(id: "balance:", key: .O, modifiers: [.command])
  //    static let balanceDelimiters = Shortcut(id: "balance:", key: .O, modifiers: [.command])
  //    static let commentSelection = Shortcut(id: "toggleComments:", key: .O, modifiers: [.command])
  //    static let commentSelection = Shortcut(id: "toggleComments:", key: .O, modifiers: [.command])
  //    static let commentSelection = Shortcut(id: "toggleComments:", key: .O, modifiers: [.command])
  //    static let decrease = Shortcut(id: "decreaseFontSize:", key: .O, modifiers: [.command])
  //    static let decrease = Shortcut(id: "decreaseFontSize:", key: .O, modifiers: [.command])
  //    static let decrease = Shortcut(id: "decreaseFontSize:", key: .O, modifiers: [.command])

  //    static let editAllInScope = Shortcut(id: "toggleTokenizedEditing:", key: .O, modifiers: [.command])
  //    static let editAllInScope = Shortcut(id: "toggleTokenizedEditing:", key: .O, modifiers: [.command])
  //    static let editAllInScope = Shortcut(id: "toggleTokenizedEditing:", key: .O, modifiers: [.command])
  //    static let errorsOnly = Shortcut(id: "showErrorsOnly:", key: .O, modifiers: [.command])
  //    static let errorsOnly = Shortcut(id: "showErrorsOnly:", key: .O, modifiers: [.command])
  //    static let errorsOnly = Shortcut(id: "showErrorsOnly:", key: .O, modifiers: [.command])
  //    static let errorsOnly = Shortcut(id: "showErrorsOnly:", key: .O, modifiers: [.command])

  //    static let fixAllIssues = Shortcut(id: "fixAllIssues:", key: .O, modifiers: [.command])
  //    static let fixAllIssues = Shortcut(id: "fixAllIssues:", key: .O, modifiers: [.command])
  //    static let fixAllIssues = Shortcut(id: "fixAllIssues:", key: .O, modifiers: [.command])
  //    static let flattenTokens = Shortcut(id: "flattenMultiPathTokens:", key: .O, modifiers: [.command])
  //    static let fold = Shortcut(id: "fold:", key: .O, modifiers: [.command])
  //    static let fold = Shortcut(id: "fold:", key: .O, modifiers: [.command])
  //    static let fold = Shortcut(id: "fold:", key: .O, modifiers: [.command])
  //    static let foldCommentBlocks = Shortcut(id: "foldAllComments:", key: .O, modifiers: [.command])
  //    static let foldCommentBlocks = Shortcut(id: "foldAllComments:", key: .O, modifiers: [.command])
  //    static let foldCommentBlocks = Shortcut(id: "foldAllComments:", key: .O, modifiers: [.command])
  //    static let foldCommentBlocks = Shortcut(id: "foldAllComments:", key: .O, modifiers: [.command])
  //    static let foldMethods&Functions = Shortcut(id: "foldAllMethods:", key: .O, modifiers: [.command])
  //    static let foldMethods&Functions = Shortcut(id: "foldAllMethods:", key: .O, modifiers: [.command])
  //    static let foldMethods&Functions = Shortcut(id: "foldAllMethods:", key: .O, modifiers: [.command])
  //    static let foldMethods&Functions = Shortcut(id: "foldAllMethods:", key: .O, modifiers: [.command])
  //    static let increase = Shortcut(id: "increaseFontSize:", key: .O, modifiers: [.command])
  //    static let increase = Shortcut(id: "increaseFontSize:", key: .O, modifiers: [.command])
  //    static let increase = Shortcut(id: "increaseFontSize:", key: .O, modifiers: [.command])
  //    static let jumpToNextLocalOrUpstreamChange = Shortcut(id: "selectNextAnyChange:", key: .O, modifiers: [.command])
  //    static let jumpToNextLocalOrUpstreamChange = Shortcut(id: "selectNextAnyChange:", key: .O, modifiers: [.command])
  //    static let jumpToNextLocalOrUpstreamChange = Shortcut(id: "selectNextAnyChange:", key: .O, modifiers: [.command])
  //    static let jumpToNextLocalOrUpstreamChange = Shortcut(id: "selectNextAnyChange:", key: .O, modifiers: [.command])
  //    static let jumpToNextChange = Shortcut(id: "selectNextChange:", key: .O, modifiers: [.command])
  //    static let jumpToNextChange = Shortcut(id: "selectNextChange:", key: .O, modifiers: [.command])
  //    static let jumpToNextChange = Shortcut(id: "selectNextChange:", key: .O, modifiers: [.command])
  //    static let jumpToNextChange = Shortcut(id: "selectNextChange:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart = Shortcut(id: "jumpToNextCounterpart:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart = Shortcut(id: "jumpToNextCounterpart:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart = Shortcut(id: "jumpToNextCounterpart:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart = Shortcut(id: "jumpToNextCounterpart:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart(option) = Shortcut(id: "jumpToNextCounterpartWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart(option) = Shortcut(id: "jumpToNextCounterpartWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart(option) = Shortcut(id: "jumpToNextCounterpartWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart(option) = Shortcut(id: "jumpToNextCounterpartWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart(shift+option) = Shortcut(id: "jumpToNextCounterpartWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart(shift+option) = Shortcut(id: "jumpToNextCounterpartWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart(shift+option) = Shortcut(id: "jumpToNextCounterpartWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToNextCounterpart(shift+option) = Shortcut(id: "jumpToNextCounterpartWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToNextPlaceholder = Shortcut(id: "selectNextPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToNextPlaceholder = Shortcut(id: "selectNextPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToNextPlaceholder = Shortcut(id: "selectNextPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToNextPlaceholder = Shortcut(id: "selectNextPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToNextPlaceholder = Shortcut(id: "selectNextPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousLocalOrUpstreamChange = Shortcut(id: "selectPreviousAnyChange:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousLocalOrUpstreamChange = Shortcut(id: "selectPreviousAnyChange:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousLocalOrUpstreamChange = Shortcut(id: "selectPreviousAnyChange:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousLocalOrUpstreamChange = Shortcut(id: "selectPreviousAnyChange:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousChange = Shortcut(id: "selectPreviousChange:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousChange = Shortcut(id: "selectPreviousChange:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousChange = Shortcut(id: "selectPreviousChange:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousChange = Shortcut(id: "selectPreviousChange:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart = Shortcut(id: "jumpToPreviousCounterpart:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart = Shortcut(id: "jumpToPreviousCounterpart:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart = Shortcut(id: "jumpToPreviousCounterpart:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart = Shortcut(id: "jumpToPreviousCounterpart:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart(option) = Shortcut(id: "jumpToPreviousCounterpartWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart(option) = Shortcut(id: "jumpToPreviousCounterpartWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart(option) = Shortcut(id: "jumpToPreviousCounterpartWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart(option) = Shortcut(id: "jumpToPreviousCounterpartWithAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart(shift+option) = Shortcut(id: "jumpToPreviousCounterpartWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart(shift+option) = Shortcut(id: "jumpToPreviousCounterpartWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart(shift+option) = Shortcut(id: "jumpToPreviousCounterpartWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousCounterpart(shift+option) = Shortcut(id: "jumpToPreviousCounterpartWithShiftPlusAlternate:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousPlaceholder = Shortcut(id: "selectPreviousPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousPlaceholder = Shortcut(id: "selectPreviousPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousPlaceholder = Shortcut(id: "selectPreviousPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousPlaceholder = Shortcut(id: "selectPreviousPlaceholder:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousPlaceholder = Shortcut(id: "selectPreviousPlaceholder:", key: .O, modifiers: [.command])
  //    static let moveLineDown = Shortcut(id: "moveCurrentLineDown:", key: .O, modifiers: [.command])
  //    static let moveLineDown = Shortcut(id: "moveCurrentLineDown:", key: .O, modifiers: [.command])
  //    static let moveLineDown = Shortcut(id: "moveCurrentLineDown:", key: .O, modifiers: [.command])
  //    static let moveLineDown = Shortcut(id: "moveCurrentLineDown:", key: .O, modifiers: [.command])
  //    static let moveLineUp = Shortcut(id: "moveCurrentLineUp:", key: .O, modifiers: [.command])
  //    static let moveLineUp = Shortcut(id: "moveCurrentLineUp:", key: .O, modifiers: [.command])
  //    static let moveLineUp = Shortcut(id: "moveCurrentLineUp:", key: .O, modifiers: [.command])
  //    static let moveLineUp = Shortcut(id: "moveCurrentLineUp:", key: .O, modifiers: [.command])
  //    static let re-indent = Shortcut(id: "indentSelection:", key: .O, modifiers: [.command])
  //    static let re-indent = Shortcut(id: "indentSelection:", key: .O, modifiers: [.command])
  //    static let re-indent = Shortcut(id: "indentSelection:", key: .O, modifiers: [.command])
  //    static let re-indent = Shortcut(id: "indentSelection:", key: .O, modifiers: [.command])
  //    static let addMissingAbstractClassOverrides = Shortcut(id: "addMissingAbstractClassOverrides:", key: .O, modifiers: [.command])
  //    static let addMissingAbstractClassOverrides = Shortcut(id: "addMissingAbstractClassOverrides:", key: .O, modifiers: [.command])
  //    static let addMissingAbstractClassOverrides = Shortcut(id: "addMissingAbstractClassOverrides:", key: .O, modifiers: [.command])
  //    static let addMissingProtocolRequirements = Shortcut(id: "addMissingProtocolRequirements:", key: .O, modifiers: [.command])
  //    static let addMissingProtocolRequirements = Shortcut(id: "addMissingProtocolRequirements:", key: .O, modifiers: [.command])
  //    static let addMissingProtocolRequirements = Shortcut(id: "addMissingProtocolRequirements:", key: .O, modifiers: [.command])
  //    static let addMissingSwitchCases = Shortcut(id: "addMissingSwitchCases:", key: .O, modifiers: [.command])
  //    static let addMissingSwitchCases = Shortcut(id: "addMissingSwitchCases:", key: .O, modifiers: [.command])
  //    static let addMissingSwitchCases = Shortcut(id: "addMissingSwitchCases:", key: .O, modifiers: [.command])
  //    static let convertToSwitch = Shortcut(id: "convertToSwitch:", key: .O, modifiers: [.command])
  //    static let convertToSwitch = Shortcut(id: "convertToSwitch:", key: .O, modifiers: [.command])
  //    static let convertToSwitch = Shortcut(id: "convertToSwitch:", key: .O, modifiers: [.command])
  //    static let expandDefault = Shortcut(id: "expandDefault:", key: .O, modifiers: [.command])
  //    static let expandDefault = Shortcut(id: "expandDefault:", key: .O, modifiers: [.command])
  //    static let expandDefault = Shortcut(id: "expandDefault:", key: .O, modifiers: [.command])
  //    static let extractToVariable = Shortcut(id: "extractExpression:", key: .O, modifiers: [.command])
  //    static let extractToVariable = Shortcut(id: "extractExpression:", key: .O, modifiers: [.command])
  //    static let extractToVariable = Shortcut(id: "extractExpression:", key: .O, modifiers: [.command])
  //    static let extractToFunction = Shortcut(id: "extractFunction:", key: .O, modifiers: [.command])
  //    static let extractToFunction = Shortcut(id: "extractFunction:", key: .O, modifiers: [.command])
  //    static let extractToFunction = Shortcut(id: "extractFunction:", key: .O, modifiers: [.command])
  //    static let extractToMethod = Shortcut(id: "extractMethod:", key: .O, modifiers: [.command])
  //    static let extractToMethod = Shortcut(id: "extractMethod:", key: .O, modifiers: [.command])
  //    static let extractToMethod = Shortcut(id: "extractMethod:", key: .O, modifiers: [.command])
  //    static let extractAllOccurrences = Shortcut(id: "extractRepeatedExpression:", key: .O, modifiers: [.command])
  //    static let extractAllOccurrences = Shortcut(id: "extractRepeatedExpression:", key: .O, modifiers: [.command])
  //    static let extractAllOccurrences = Shortcut(id: "extractRepeatedExpression:", key: .O, modifiers: [.command])
  //    static let generateMissingFunctionDefinitions = Shortcut(id: "generateMissingFunctionDefinitions:", key: .O, modifiers: [.command])
  //    static let generateMissingFunctionDefinitions = Shortcut(id: "generateMissingFunctionDefinitions:", key: .O, modifiers: [.command])
  //    static let generateMissingFunctionDefinitions = Shortcut(id: "generateMissingFunctionDefinitions:", key: .O, modifiers: [.command])
  //    static let rename‚Ä¶ = Shortcut(id: "renameRefactor:", key: .O, modifiers: [.command])
  //    static let rename‚Ä¶ = Shortcut(id: "renameRefactor:", key: .O, modifiers: [.command])
  //    static let rename‚Ä¶ = Shortcut(id: "renameRefactor:", key: .O, modifiers: [.command])
  //    static let wrapInNslocalizedstring = Shortcut(id: "wrapInNSLocalizedString:", key: .O, modifiers: [.command])
  //    static let wrapInNslocalizedstring = Shortcut(id: "wrapInNSLocalizedString:", key: .O, modifiers: [.command])
  //    static let wrapInNslocalizedstring = Shortcut(id: "wrapInNSLocalizedString:", key: .O, modifiers: [.command])
  //    static let reset = Shortcut(id: "resetFontSize:", key: .O, modifiers: [.command])
  //    static let reset = Shortcut(id: "resetFontSize:", key: .O, modifiers: [.command])
  //    static let reset = Shortcut(id: "resetFontSize:", key: .O, modifiers: [.command])
  //    static let selectAllSymbols = Shortcut(id: "selectAllSymbols:", key: .O, modifiers: [.command])
  //    static let selectAllSymbols = Shortcut(id: "selectAllSymbols:", key: .O, modifiers: [.command])
  //    static let selectAllSymbols = Shortcut(id: "selectAllSymbols:", key: .O, modifiers: [.command])
  //    static let selectAllSymbols = Shortcut(id: "selectAllSymbols:", key: .O, modifiers: [.command])
  //    static let selectColumnDown = Shortcut(id: "selectColumnDown:", key: .O, modifiers: [.command])
  //    static let selectColumnDown = Shortcut(id: "selectColumnDown:", key: .O, modifiers: [.command])
  //    static let selectColumnDown = Shortcut(id: "selectColumnDown:", key: .O, modifiers: [.command])
  //    static let selectColumnUp = Shortcut(id: "selectColumnUp:", key: .O, modifiers: [.command])
  //    static let selectColumnUp = Shortcut(id: "selectColumnUp:", key: .O, modifiers: [.command])
  //    static let selectColumnUp = Shortcut(id: "selectColumnUp:", key: .O, modifiers: [.command])
  //    static let showCodeActions = Shortcut(id: "selectStructure:", key: .O, modifiers: [.command])
  //    static let shiftLeft = Shortcut(id: "shiftLeft:", key: .O, modifiers: [.command])
  //    static let shiftLeft = Shortcut(id: "shiftLeft:", key: .O, modifiers: [.command])
  //    static let shiftLeft = Shortcut(id: "shiftLeft:", key: .O, modifiers: [.command])
  //    static let shiftLeft = Shortcut(id: "shiftLeft:", key: .O, modifiers: [.command])
  //    static let shiftRight = Shortcut(id: "shiftRight:", key: .O, modifiers: [.command])
  //    static let shiftRight = Shortcut(id: "shiftRight:", key: .O, modifiers: [.command])
  //    static let shiftRight = Shortcut(id: "shiftRight:", key: .O, modifiers: [.command])
  //    static let shiftRight = Shortcut(id: "shiftRight:", key: .O, modifiers: [.command])
  //    static let authors = Shortcut(id: "toggleAuthorsShown:", key: .O, modifiers: [.command])
  //    static let authors = Shortcut(id: "toggleAuthorsShown:", key: .O, modifiers: [.command])
  //    static let showLastChangeForLine = Shortcut(id: "blameSelectedLine:", key: .O, modifiers: [.command])
  //    static let showLastChangeForLine = Shortcut(id: "blameSelectedLine:", key: .O, modifiers: [.command])
  //    static let showLastChangeForLine = Shortcut(id: "blameSelectedLine:", key: .O, modifiers: [.command])
  //    static let codeCoverage = Shortcut(id: "toggleCodeCoverageShown:", key: .O, modifiers: [.command])
  //    static let showCompletions = Shortcut(id: "complete:", key: .O, modifiers: [.command])
  //    static let showCompletions = Shortcut(id: "complete:", key: .O, modifiers: [.command])
  //    static let showCompletions = Shortcut(id: "complete:", key: .O, modifiers: [.command])
  //    static let showCompletions = Shortcut(id: "complete:", key: .O, modifiers: [.command])
  //    static let invisibles = Shortcut(id: "toggleInvisibleCharactersShown:", key: .O, modifiers: [.command])
  //    static let invisibles = Shortcut(id: "toggleInvisibleCharactersShown:", key: .O, modifiers: [.command])
  //    static let invisibles = Shortcut(id: "toggleInvisibleCharactersShown:", key: .O, modifiers: [.command])
  //    static let invisibles = Shortcut(id: "toggleInvisibleCharactersShown:", key: .O, modifiers: [.command])
  //    static let showAllIssues = Shortcut(id: "toggleMessageBubbles:", key: .O, modifiers: [.command])
  //    static let showAllIssues = Shortcut(id: "toggleMessageBubbles:", key: .O, modifiers: [.command])
  //    static let showAllIssues = Shortcut(id: "toggleMessageBubbles:", key: .O, modifiers: [.command])
  //    static let showAllIssues = Shortcut(id: "toggleMessageBubbles:", key: .O, modifiers: [.command])
  //    static let minimap = Shortcut(id: "toggleMinimapShown:", key: .O, modifiers: [.command])
  //    static let splitSelectionByLines = Shortcut(id: "splitSelectionByLine:", key: .O, modifiers: [.command])
  //    static let splitSelectionByLines = Shortcut(id: "splitSelectionByLine:", key: .O, modifiers: [.command])
  //    static let splitSelectionByLines = Shortcut(id: "splitSelectionByLine:", key: .O, modifiers: [.command])
  //    static let splitSelectionByLines = Shortcut(id: "splitSelectionByLine:", key: .O, modifiers: [.command])
  //    static let showIssue = Shortcut(id: "toggleIssueShown:", key: .O, modifiers: [.command])
  //    static let showIssue = Shortcut(id: "toggleIssueShown:", key: .O, modifiers: [.command])
  //    static let showIssue = Shortcut(id: "toggleIssueShown:", key: .O, modifiers: [.command])
  //    static let showIssue = Shortcut(id: "toggleIssueShown:", key: .O, modifiers: [.command])
  //    static let unfold = Shortcut(id: "unfold:", key: .O, modifiers: [.command])
  //    static let unfold = Shortcut(id: "unfold:", key: .O, modifiers: [.command])
  //    static let unfold = Shortcut(id: "unfold:", key: .O, modifiers: [.command])
  //    static let unfoldAll = Shortcut(id: "unfoldAll:", key: .O, modifiers: [.command])
  //    static let unfoldAll = Shortcut(id: "unfoldAll:", key: .O, modifiers: [.command])
  //    static let unfoldAll = Shortcut(id: "unfoldAll:", key: .O, modifiers: [.command])
  //    static let unfoldAll = Shortcut(id: "unfoldAll:", key: .O, modifiers: [.command])
  //    static let unfoldCommentBlocks = Shortcut(id: "unfoldAllComments:", key: .O, modifiers: [.command])
  //    static let unfoldCommentBlocks = Shortcut(id: "unfoldAllComments:", key: .O, modifiers: [.command])
  //    static let unfoldCommentBlocks = Shortcut(id: "unfoldAllComments:", key: .O, modifiers: [.command])
  //    static let unfoldCommentBlocks = Shortcut(id: "unfoldAllComments:", key: .O, modifiers: [.command])
  //    static let unfoldMethods&Functions = Shortcut(id: "unfoldAllMethods:", key: .O, modifiers: [.command])
  //    static let unfoldMethods&Functions = Shortcut(id: "unfoldAllMethods:", key: .O, modifiers: [.command])
  //    static let unfoldMethods&Functions = Shortcut(id: "unfoldAllMethods:", key: .O, modifiers: [.command])
  //    static let unfoldMethods&Functions = Shortcut(id: "unfoldAllMethods:", key: .O, modifiers: [.command])
  //    static let playground‚Ä¶ = Shortcut(id: "newPlayground:", key: .O, modifiers: [.command])
  //    static let playgroundPage = Shortcut(id: "newPlaygroundPage:", key: .O, modifiers: [.command])
  //    static let addItem = Shortcut(id: "addAction:", key: .O, modifiers: [.command])
  //    static let array = Shortcut(id: "setPlistTypeArray:", key: .O, modifiers: [.command])
  //    static let boolean = Shortcut(id: "setPlistTypeBoolean:", key: .O, modifiers: [.command])
  //    static let data = Shortcut(id: "setPlistTypeData:", key: .O, modifiers: [.command])
  //    static let date = Shortcut(id: "setPlistTypeDate:", key: .O, modifiers: [.command])
  //    static let dictionary = Shortcut(id: "setPlistTypeDictionary:", key: .O, modifiers: [.command])
  //    static let number = Shortcut(id: "setPlistTypeNumber:", key: .O, modifiers: [.command])
  //    static let rawKeys&Values = Shortcut(id: "toggleEditRawKeysAndValues:", key: .O, modifiers: [.command])
  //    static let string = Shortcut(id: "setPlistTypeString:", key: .O, modifiers: [.command])
  //    static let makeTextBigger = Shortcut(id: "scriptingDefinition_makeTextLarger:", key: .O, modifiers: [.command])
  //    static let makeTextSmaller = Shortcut(id: "scriptingDefinition_makeTextSmaller:", key: .O, modifiers: [.command])
  //    static let addExistingRemote‚Ä¶ = Shortcut(id: "addRemoteEditorCommand:", key: .O, modifiers: [.command])
  //    static let checkout‚Ä¶ = Shortcut(id: "checkoutBranchEditorCommand:", key: .O, modifiers: [.command])
  //    static let checkout‚Ä¶ = Shortcut(id: "checkoutEditorCommand:", key: .O, modifiers: [.command])
  //    static let newBranch‚Ä¶ = Shortcut(id: "createBranchEditorCommand:", key: .O, modifiers: [.command])
  //    static let newBranch‚Ä¶ = Shortcut(id: "createBranchFromBranchEditorCommand:", key: .O, modifiers: [.command])
  //    static let newTag‚Ä¶ = Shortcut(id: "createTagEditorCommand:", key: .O, modifiers: [.command])
  //    static let createRemote‚Ä¶ = Shortcut(id: "hostRepositoryEditorCommand:", key: .O, modifiers: [.command])
  //    static let mergeFromBranch‚Ä¶ = Shortcut(id: "mergeFromEditorCommand:", key: .O, modifiers: [.command])
  //    static let mergeIntoBranch‚Ä¶ = Shortcut(id: "mergeIntoEditorCommand:", key: .O, modifiers: [.command])
  //    static let emailAuthor = Shortcut(id: "newEmailEditorCommand:", key: .O, modifiers: [.command])
  //    static let refreshHistory = Shortcut(id: "refreshEditorCommand:", key: .O, modifiers: [.command])
  //    static let viewOnHost‚Ä¶ = Shortcut(id: "viewOnSCMHostEditorCommand:", key: .O, modifiers: [.command])
  //    static let showSourceControlInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showHistoryInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let addConfiguration = Shortcut(id: "menuCmd_addConfiguration:", key: .O, modifiers: [.command])
  //    static let addTestTarget‚Ä¶ = Shortcut(id: "menuCmd_addTestTarget:", key: .O, modifiers: [.command])
  //    static let editTestPlan = Shortcut(id: "editTestPlan:", key: .O, modifiers: [.command])
  //    static let manageTestPlans‚Ä¶ = Shortcut(id: "manageTestPlans:", key: .O, modifiers: [.command])
  //    static let newTestPlan‚Ä¶ = Shortcut(id: "createNewTestPlan:", key: .O, modifiers: [.command])
  //    static let selectNextTestPlan = Shortcut(id: "selectNextTestPlan:", key: .O, modifiers: [.command])
  //    static let selectPreviousTestPlan = Shortcut(id: "selectPreviousTestPlan:", key: .O, modifiers: [.command])
  //    static let showConfigurations = Shortcut(id: "menuCmd_showConfigurations:", key: .O, modifiers: [.command])
  //    static let showTests = Shortcut(id: "menuCmd_showTests:", key: .O, modifiers: [.command])
  //    static let showAttributesInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let deleteSelectedItems = Shortcut(id: "removeImageCatalogItemsBasedOnSelectionContext:", key: .O, modifiers: [.command])
  //    static let deleteSelectedItems = Shortcut(id: "removeImageCatalogItemsBasedOnSelectionContext:", key: .O, modifiers: [.command])
  //    static let openInExternalEditor = Shortcut(id: "openImageCatalogItemsInExternalEditor:", key: .O, modifiers: [.command])
  //    static let openInExternalEditor = Shortcut(id: "openImageCatalogItemsInExternalEditor:", key: .O, modifiers: [.command])
  //    static let quickLook = Shortcut(id: "quickLookImageCatalogItems:", key: .O, modifiers: [.command])
  //    static let quickLook = Shortcut(id: "quickLookImageCatalogItems:", key: .O, modifiers: [.command])
  //    static let showInFinder = Shortcut(id: "showImageCatalogItemsInFinder:", key: .O, modifiers: [.command])
  //    static let showInFinder = Shortcut(id: "showImageCatalogItemsInFinder:", key: .O, modifiers: [.command])
  //    static let showOverview = Shortcut(id: "showOverviewControllerInDetailArea:", key: .O, modifiers: [.command])
  //    static let showSlicing = Shortcut(id: "showSlicingControllerInDetailArea:", key: .O, modifiers: [.command])
  //    static let zoomToFit = Shortcut(id: "zoomCanvasToFitSelection:", key: .O, modifiers: [.command])
  //    static let zoomToFit = Shortcut(id: "zoomCanvasToFitSelection:", key: .O, modifiers: [.command])
  //    static let zoomIn = Shortcut(id: "zoomCanvasIn:", key: .O, modifiers: [.command])
  //    static let zoomIn = Shortcut(id: "zoomCanvasIn:", key: .O, modifiers: [.command])
  //    static let zoomOut = Shortcut(id: "zoomCanvasOut:", key: .O, modifiers: [.command])
  //    static let zoomOut = Shortcut(id: "zoomCanvasOut:", key: .O, modifiers: [.command])
  //    static let zoomTo100% = Shortcut(id: "fakeActionThatWillBeRepalcedByIBZoomMenuDelegate:", key: .O, modifiers: [.command])
  //    static let zoomTo100% = Shortcut(id: "fakeActionThatWillBeRepalcedByIBZoomMenuDelegate:", key: .O, modifiers: [.command])
  //    static let addHorizontalGuide = Shortcut(id: "addHorizontalGuide:", key: .O, modifiers: [.command])
  //    static let addHorizontalGuide = Shortcut(id: "addHorizontalGuide:", key: .O, modifiers: [.command])
  //    static let addMissingConstraints = Shortcut(id: "addMissingConstraints:", key: .O, modifiers: [.command])
  //    static let addMissingConstraints = Shortcut(id: "addMissingConstraints:", key: .O, modifiers: [.command])
  //    static let addMissingConstraints = Shortcut(id: "addMissingConstraintsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let addMissingConstraints = Shortcut(id: "addMissingConstraintsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let addVerticalGuide = Shortcut(id: "addVerticalGuide:", key: .O, modifiers: [.command])
  //    static let addVerticalGuide = Shortcut(id: "addVerticalGuide:", key: .O, modifiers: [.command])
  //    static let baselines = Shortcut(id: "alignBaselines:", key: .O, modifiers: [.command])
  //    static let baselines = Shortcut(id: "alignBaselines:", key: .O, modifiers: [.command])
  //    static let bottomEdges = Shortcut(id: "alignEdgeBottom:", key: .O, modifiers: [.command])
  //    static let bottomEdges = Shortcut(id: "alignEdgeBottom:", key: .O, modifiers: [.command])
  //    static let horizontallyInContainer = Shortcut(id: "alignCenterInContainer:", key: .O, modifiers: [.command])
  //    static let horizontallyInContainer = Shortcut(id: "alignCenterInContainer:", key: .O, modifiers: [.command])
  //    static let horizontalCenters = Shortcut(id: "alignMidX:", key: .O, modifiers: [.command])
  //    static let horizontalCenters = Shortcut(id: "alignMidX:", key: .O, modifiers: [.command])
  //    static let leftEdges = Shortcut(id: "alignEdgeLeft:", key: .O, modifiers: [.command])
  //    static let leftEdges = Shortcut(id: "alignEdgeLeft:", key: .O, modifiers: [.command])
  //    static let rightEdges = Shortcut(id: "alignEdgeRight:", key: .O, modifiers: [.command])
  //    static let rightEdges = Shortcut(id: "alignEdgeRight:", key: .O, modifiers: [.command])
  //    static let topEdges = Shortcut(id: "alignEdgeTop:", key: .O, modifiers: [.command])
  //    static let topEdges = Shortcut(id: "alignEdgeTop:", key: .O, modifiers: [.command])
  //    static let verticallyInContainer = Shortcut(id: "alignMiddleInContainer:", key: .O, modifiers: [.command])
  //    static let verticallyInContainer = Shortcut(id: "alignMiddleInContainer:", key: .O, modifiers: [.command])
  //    static let verticalCenters = Shortcut(id: "alignMidY:", key: .O, modifiers: [.command])
  //    static let verticalCenters = Shortcut(id: "alignMidY:", key: .O, modifiers: [.command])
  //    static let automaticallyRefreshViews = Shortcut(id: "toggleAutomaticallyRefreshViews:", key: .O, modifiers: [.command])
  //    static let automaticallyRefreshViews = Shortcut(id: "toggleAutomaticallyRefreshViews:", key: .O, modifiers: [.command])
  //    static let resetToSuggestedConstraints = Shortcut(id: "clearAndAddSuggestedConstraints:", key: .O, modifiers: [.command])
  //    static let resetToSuggestedConstraints = Shortcut(id: "clearAndAddSuggestedConstraints:", key: .O, modifiers: [.command])
  //    static let resetToSuggestedConstraints = Shortcut(id: "clearAndAddSuggestedConstraintsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let resetToSuggestedConstraints = Shortcut(id: "clearAndAddSuggestedConstraintsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let clearConstraints = Shortcut(id: "clearConstraints:", key: .O, modifiers: [.command])
  //    static let clearConstraints = Shortcut(id: "clearConstraints:", key: .O, modifiers: [.command])
  //    static let clearConstraints = Shortcut(id: "clearConstraintsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let clearConstraints = Shortcut(id: "clearConstraintsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let debugSelectedViews = Shortcut(id: "debugSelectedViews:", key: .O, modifiers: [.command])
  //    static let debugSelectedViews = Shortcut(id: "debugSelectedViews:", key: .O, modifiers: [.command])
  //    static let jumpToNextObjectWithClippedContent = Shortcut(id: "jumpToNextObjectWithClippedContent:", key: .O, modifiers: [.command])
  //    static let jumpToPreviousObjectWithClippedContent = Shortcut(id: "jumpToPreviousObjectWithClippedContent:", key: .O, modifiers: [.command])
  //    static let allProperties = Shortcut(id: "setLocalizationLockingAllProperties:", key: .O, modifiers: [.command])
  //    static let allProperties = Shortcut(id: "setLocalizationLockingAllProperties:", key: .O, modifiers: [.command])
  //    static let localizableProperties = Shortcut(id: "setLocalizationLockingLocalizableProperties:", key: .O, modifiers: [.command])
  //    static let localizableProperties = Shortcut(id: "setLocalizationLockingLocalizableProperties:", key: .O, modifiers: [.command])
  //    static let non-localizableProperties = Shortcut(id: "setLocalizationLockingNonLocalizableProperties:", key: .O, modifiers: [.command])
  //    static let non-localizableProperties = Shortcut(id: "setLocalizationLockingNonLocalizableProperties:", key: .O, modifiers: [.command])
  //    static let nothing = Shortcut(id: "setLocalizationLockingNothing:", key: .O, modifiers: [.command])
  //    static let nothing = Shortcut(id: "setLocalizationLockingNothing:", key: .O, modifiers: [.command])
  //    static let resetLockingControls = Shortcut(id: "resetLocalizationLocking:", key: .O, modifiers: [.command])
  //    static let resetLockingControls = Shortcut(id: "resetLocalizationLocking:", key: .O, modifiers: [.command])
  //    static let refactorToStoryboard‚Ä¶ = Shortcut(id: "refactorToStoryboard:", key: .O, modifiers: [.command])
  //    static let refreshAllViews = Shortcut(id: "refreshLiveViews:", key: .O, modifiers: [.command])
  //    static let refreshAllViews = Shortcut(id: "refreshLiveViews:", key: .O, modifiers: [.command])
  //    static let revealInDocumentOutline = Shortcut(id: "revealSelectedObjectsInDocumentOutline:", key: .O, modifiers: [.command])
  //    static let revealInDocumentOutline = Shortcut(id: "revealSelectedObjectsInDocumentOutline:", key: .O, modifiers: [.command])
  //    static let sendBackward = Shortcut(id: "sendBackward:", key: .O, modifiers: [.command])
  //    static let sendBackward = Shortcut(id: "sendBackward:", key: .O, modifiers: [.command])
  //    static let sendForward = Shortcut(id: "sendForward:", key: .O, modifiers: [.command])
  //    static let sendForward = Shortcut(id: "sendForward:", key: .O, modifiers: [.command])
  //    static let sendToBack = Shortcut(id: "sendToBack:", key: .O, modifiers: [.command])
  //    static let sendToBack = Shortcut(id: "sendToBack:", key: .O, modifiers: [.command])
  //    static let sendToFront = Shortcut(id: "sendToFront:", key: .O, modifiers: [.command])
  //    static let sendToFront = Shortcut(id: "sendToFront:", key: .O, modifiers: [.command])
  //    static let boundsRectangles = Shortcut(id: "toggleShowingBoundsRectangles:", key: .O, modifiers: [.command])
  //    static let boundsRectangles = Shortcut(id: "toggleShowingBoundsRectangles:", key: .O, modifiers: [.command])
  //    static let constraints = Shortcut(id: "toggleShowingConstraints:", key: .O, modifiers: [.command])
  //    static let constraints = Shortcut(id: "toggleShowingConstraints:", key: .O, modifiers: [.command])
  //    static let intrinsicSizeConstraintsContributingToAmbiguity = Shortcut(id: "toggleShowingIntrinsicSizeConstraints:", key: .O, modifiers: [.command])
  //    static let intrinsicSizeConstraintsContributingToAmbiguity = Shortcut(id: "toggleShowingIntrinsicSizeConstraints:", key: .O, modifiers: [.command])
  //    static let involvedViewsForSelectedConstraints = Shortcut(id: "toggleShowingInvolvedViewsForSelectedConstraints:", key: .O, modifiers: [.command])
  //    static let involvedViewsForSelectedConstraints = Shortcut(id: "toggleShowingInvolvedViewsForSelectedConstraints:", key: .O, modifiers: [.command])
  //    static let layoutRectangles = Shortcut(id: "toggleShowingLayoutRectangles:", key: .O, modifiers: [.command])
  //    static let layoutRectangles = Shortcut(id: "toggleShowingLayoutRectangles:", key: .O, modifiers: [.command])
  //    static let placeholderBackgrounds = Shortcut(id: "toggleShowingPlaceholderBackgrounds:", key: .O, modifiers: [.command])
  //    static let placeholderBackgrounds = Shortcut(id: "toggleShowingPlaceholderBackgrounds:", key: .O, modifiers: [.command])
  //    static let deviceBezels = Shortcut(id: "toggleSceneMaskAndBezels:", key: .O, modifiers: [.command])
  //    static let deviceBezels = Shortcut(id: "toggleSceneMaskAndBezels:", key: .O, modifiers: [.command])
  //    static let sizeToFitContent = Shortcut(id: "sizeSelectionToFit:", key: .O, modifiers: [.command])
  //    static let sizeToFitContent = Shortcut(id: "sizeSelectionToFit:", key: .O, modifiers: [.command])
  //    static let snapToGuides = Shortcut(id: "toggleSnapToGuides:", key: .O, modifiers: [.command])
  //    static let snapToGuides = Shortcut(id: "toggleSnapToGuides:", key: .O, modifiers: [.command])
  //    static let previewTouchBar = Shortcut(id: "toggleHardwarePreview:", key: .O, modifiers: [.command])
  //    static let previewTouchBar = Shortcut(id: "toggleHardwarePreview:", key: .O, modifiers: [.command])
  //    static let documentOutline = Shortcut(id: "toggleStructureArea:", key: .O, modifiers: [.command])
  //    static let documentOutline = Shortcut(id: "toggleStructureArea:", key: .O, modifiers: [.command])
  //    static let unembed = Shortcut(id: "unembedObjects:", key: .O, modifiers: [.command])
  //    static let unembed = Shortcut(id: "unembedObjects:", key: .O, modifiers: [.command])
  //    static let updateConstraintConstants = Shortcut(id: "updateConstraintConstants:", key: .O, modifiers: [.command])
  //    static let updateConstraintConstants = Shortcut(id: "updateConstraintConstants:", key: .O, modifiers: [.command])
  //    static let updateConstraintConstants = Shortcut(id: "updateConstraintConstantsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let updateConstraintConstants = Shortcut(id: "updateConstraintConstantsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let updateFrames = Shortcut(id: "updateFramesToMatchConstraints:", key: .O, modifiers: [.command])
  //    static let updateFrames = Shortcut(id: "updateFramesToMatchConstraints:", key: .O, modifiers: [.command])
  //    static let updateFrames = Shortcut(id: "updateFramesToMatchConstraintsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let updateFrames = Shortcut(id: "updateFramesToMatchConstraintsInArbitrationUnit:", key: .O, modifiers: [.command])
  //    static let updateFrames = Shortcut(id: "updateFramesToMatchConstraintsRecursively:", key: .O, modifiers: [.command])
  //    static let updateFrames = Shortcut(id: "updateFramesToMatchConstraintsRecursively:", key: .O, modifiers: [.command])
  //    static let showAttributesInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showBindingsInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showConnectionsInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showViewEffectsInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showIdentityInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let showSizeInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let nextPage = Shortcut(id: "pdf_nextPage:", key: .O, modifiers: [.command])
  //    static let previousPage = Shortcut(id: "pdf_previousPage:", key: .O, modifiers: [.command])
  //    static let singlePage = Shortcut(id: "pdf_singlePage:", key: .O, modifiers: [.command])
  //    static let singlePageContinuous = Shortcut(id: "pdf_singlePageContinuous:", key: .O, modifiers: [.command])
  //    static let twoPages = Shortcut(id: "pdf_twoPages:", key: .O, modifiers: [.command])
  //    static let twoPagesContinuous = Shortcut(id: "pdf_twoPagesContinuous:", key: .O, modifiers: [.command])
  //    static let zoomActualSize = Shortcut(id: "pdf_zoomActualSize:", key: .O, modifiers: [.command])
  //    static let zoomIn = Shortcut(id: "pdf_zoomIn:", key: .O, modifiers: [.command])
  //    static let zoomOut = Shortcut(id: "pdf_zoomOut:", key: .O, modifiers: [.command])
  //    static let nextPage = Shortcut(id: "nextPage:", key: .O, modifiers: [.command])
  //    static let pause = Shortcut(id: "pause:", key: .O, modifiers: [.command])
  //    static let play = Shortcut(id: "play:", key: .O, modifiers: [.command])
  //    static let previousPage = Shortcut(id: "previousPage:", key: .O, modifiers: [.command])
  //    static let addLink‚Ä¶ = Shortcut(id: "rtf_addLink:", key: .O, modifiers: [.command])
  //    static let insertLineBreak = Shortcut(id: "rtf_insertLineBreak:", key: .O, modifiers: [.command])
  //    static let insertPageBreak = Shortcut(id: "rtf_insertPageBreak:", key: .O, modifiers: [.command])
  //    static let insertParagraphBreak = Shortcut(id: "rtf_insertParagraphBreak:", key: .O, modifiers: [.command])
  //    static let allowHyphenation = Shortcut(id: "rtf_toggleHyphenation:", key: .O, modifiers: [.command])
  //    static let showRuler = Shortcut(id: "rtf_toggleRuler:", key: .O, modifiers: [.command])
  //    static let bringToFront = Shortcut(id: "editorMenuBringToFront:", key: .O, modifiers: [.command])
  //    static let createNavigationGraphFromNodeBounds = Shortcut(id: "editorMenuCreateNavigationGraphFromNodeBounds:", key: .O, modifiers: [.command])
  //    static let createNavigationGraphFromNodePhysicsBodies = Shortcut(id: "editorMenuCreateNavigationGraphFromNodePhysicsBodies:", key: .O, modifiers: [.command])
  //    static let editNavigationGraph = Shortcut(id: "editorMenuEditNavigationGraph:", key: .O, modifiers: [.command])
  //    static let editTileMap = Shortcut(id: "editorMenuEditTileMap:", key: .O, modifiers: [.command])
  //    static let enableScrollWheelPanning = Shortcut(id: "editorMenuEnableScrollWheelPanning:", key: .O, modifiers: [.command])
  //    static let gridTileSet = Shortcut(id: "editorMenuNewGridTileSet:", key: .O, modifiers: [.command])
  //    static let hexagonalFlatTileSet = Shortcut(id: "editorMenuNewHexFlatTileSet:", key: .O, modifiers: [.command])
  //    static let hexagonalPointyTileSet = Shortcut(id: "editorMenuNewHexPointyTileSet:", key: .O, modifiers: [.command])
  //    static let isometricTileSet = Shortcut(id: "editorMenuNewIsoTileSet:", key: .O, modifiers: [.command])
  //    static let restoreZoom = Shortcut(id: "editorMenuRestoreZoom:", key: .O, modifiers: [.command])
  //    static let sendToBack = Shortcut(id: "editorMenuSendToBack:", key: .O, modifiers: [.command])
  //    static let enableGrid = Shortcut(id: "editorMenuToggleGrid:", key: .O, modifiers: [.command])
  //    static let snapToGrid = Shortcut(id: "editorMenuToggleGridSnapping:", key: .O, modifiers: [.command])
  //    static let snapToNodes = Shortcut(id: "editorMenuToggleNodeSnapping:", key: .O, modifiers: [.command])
  //    static let edit/Simulate = Shortcut(id: "editorMenuTogglePlayPause:", key: .O, modifiers: [.command])
  //    static let allowPositionSnapping = Shortcut(id: "editorMenuTogglePositionSnapping:", key: .O, modifiers: [.command])
  //    static let allowRotationSnapping = Shortcut(id: "editorMenuToggleRotationSnapping:", key: .O, modifiers: [.command])
  //    static let enableRulers = Shortcut(id: "editorMenuToggleRulers:", key: .O, modifiers: [.command])
  //    static let allowScaleSnapping = Shortcut(id: "editorMenuToggleScaleSnapping:", key: .O, modifiers: [.command])
  //    static let snapToTiles = Shortcut(id: "editorMenuToggleTileSnapping:", key: .O, modifiers: [.command])
  //    static let zoomIn = Shortcut(id: "editorMenuZoomIn:", key: .O, modifiers: [.command])
  //    static let zoomOut = Shortcut(id: "editorMenuZoomOut:", key: .O, modifiers: [.command])
  //    static let refresh = Shortcut(id: "refreshPreviews:", key: .O, modifiers: [.command])
  //    static let refresh = Shortcut(id: "refreshPreviews:", key: .O, modifiers: [.command])
  //    static let refresh = Shortcut(id: "refreshPreviews:", key: .O, modifiers: [.command])
  //    static let showDeviceBezels = Shortcut(id: "toggleDeviceBezels:", key: .O, modifiers: [.command])
  //    static let showDeviceBezels = Shortcut(id: "toggleDeviceBezels:", key: .O, modifiers: [.command])
  //    static let showDeviceBezels = Shortcut(id: "toggleDeviceBezels:", key: .O, modifiers: [.command])
  //    static let automaticallyRefreshCanvas = Shortcut(id: "toggleThunkingEnabled:", key: .O, modifiers: [.command])
  //    static let automaticallyRefreshCanvas = Shortcut(id: "toggleThunkingEnabled:", key: .O, modifiers: [.command])
  //    static let automaticallyRefreshCanvas = Shortcut(id: "toggleThunkingEnabled:", key: .O, modifiers: [.command])
  //    static let showViewBounds = Shortcut(id: "toggleViewBoundaries:", key: .O, modifiers: [.command])
  //    static let showViewBounds = Shortcut(id: "toggleViewBoundaries:", key: .O, modifiers: [.command])
  //    static let showViewBounds = Shortcut(id: "toggleViewBoundaries:", key: .O, modifiers: [.command])
  //    static let showAttributesInspector = Shortcut(id: "showInspectorWithChoiceFromSender:", key: .O, modifiers: [.command])
  //    static let addPackageDependency‚Ä¶ = Shortcut(id: "addRemotePackage:", key: .O, modifiers: [.command])
  //    static let exportForLocalization... = Shortcut(id: "localizationExport:", key: .O, modifiers: [.command])
  //    static let importLocalizations... = Shortcut(id: "localizationImport:", key: .O, modifiers: [.command])
  //    static let addBuildCarbonResourcesBuildPhase = Shortcut(id: "Xcode3Support_newBuildCarbonResourcesBuildPhase:", key: .O, modifiers: [.command])
  //    static let addBuildRule = Shortcut(id: "Xcode3Support_newBuildRule:", key: .O, modifiers: [.command])
  //    static let addCapability = Shortcut(id: "addCapability:", key: .O, modifiers: [.command])
  //    static let addCompileSourcesBuildPhase = Shortcut(id: "Xcode3Support_newCompileSourcesBuildPhase:", key: .O, modifiers: [.command])
  //    static let addConditionalSetting = Shortcut(id: "addConditionalBuildProperty:", key: .O, modifiers: [.command])
  //    static let addCopyBundleResourcesBuildPhase = Shortcut(id: "Xcode3Support_newCopyBundleResourcesBuildPhase:", key: .O, modifiers: [.command])
  //    static let addCopyFilesBuildPhase = Shortcut(id: "Xcode3Support_newCopyFilesBuildPhase:", key: .O, modifiers: [.command])
  //    static let addRunScriptBuildPhase = Shortcut(id: "Xcode3Support_newRunScriptBuildPhase:", key: .O, modifiers: [.command])
  //    static let addHeadersBuildPhase = Shortcut(id: "Xcode3Support_newCopyHeadersBuildPhase:", key: .O, modifiers: [.command])
  //    static let addLinkBinaryWithLibrariesBuildPhase = Shortcut(id: "Xcode3Support_newLinkBinaryWithLibrariesBuildPhase:", key: .O, modifiers: [.command])
  //    static let addTarget‚Ä¶ = Shortcut(id: "addTargetToProject:", key: .O, modifiers: [.command])
  //    static let addUser-definedSetting = Shortcut(id: "addUserDefinedBuildProperty:", key: .O, modifiers: [.command])
  //    static let showSettingNames = Shortcut(id: "toggleBuildPropertyNameDisplayMode:", key: .O, modifiers: [.command])
  //    static let showDefinitions = Shortcut(id: "toggleBuildPropertyValueDisplayMode:", key: .O, modifiers: [.command])
  //    static let validateSettings... = Shortcut(id: "showUpgradeProjectSheet:", key: .O, modifiers: [.command])
}
